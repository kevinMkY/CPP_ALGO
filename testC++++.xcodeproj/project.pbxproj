// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 50;
	objects = {

/* Begin PBXBuildFile section */
		3B3C033E2599CC0400EBAA9F /* 111_二叉树的最小深度.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B3C033C2599CC0400EBAA9F /* 111_二叉树的最小深度.cpp */; };
		3B3C03422599D05900EBAA9F /* 1379_找出克隆二叉树中的相同节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B3C03402599D05900EBAA9F /* 1379_找出克隆二叉树中的相同节点.cpp */; };
		3B3C03462599D25E00EBAA9F /* 654_最大二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B3C03442599D25E00EBAA9F /* 654_最大二叉树.cpp */; };
		3B3C034A2599D63700EBAA9F /* 1315_祖父节点值为偶数的节点和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B3C03482599D63700EBAA9F /* 1315_祖父节点值为偶数的节点和.cpp */; };
		3B3C034E2599D89C00EBAA9F /* 1302_层数最深叶子节点的和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B3C034C2599D89C00EBAA9F /* 1302_层数最深叶子节点的和.cpp */; };
		3B3C03522599DC4600EBAA9F /* 894_所有可能的满二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B3C03502599DC4600EBAA9F /* 894_所有可能的满二叉树.cpp */; };
		3B3C0356259B08D700EBAA9F /* 222_完全二叉树的节点个数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B3C0354259B08D700EBAA9F /* 222_完全二叉树的节点个数.cpp */; };
		3B3C8A082591E5F000DEA8D3 /* 235_二叉搜索树的最近公共祖先.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B3C8A062591E5F000DEA8D3 /* 235_二叉搜索树的最近公共祖先.cpp */; };
		3B3C8A0C2591FD1800DEA8D3 /* 872_叶子相似的树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B3C8A0A2591FD1800DEA8D3 /* 872_叶子相似的树.cpp */; };
		3B3C8A11259340FD00DEA8D3 /* 530_二叉搜索树的最小绝对差.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B3C8A0F259340FD00DEA8D3 /* 530_二叉搜索树的最小绝对差.cpp */; };
		3B3C8A1525934E7F00DEA8D3 /* 100_相同的树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B3C8A1325934E7F00DEA8D3 /* 100_相同的树.cpp */; };
		3B44FABF25947D9200B29245 /* 563_二叉树的坡度.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B44FABD25947D9200B29245 /* 563_二叉树的坡度.cpp */; };
		3B44FAC325948F3800B29245 /* 653_两数之和 IV - 输入 BST.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B44FAC125948F3800B29245 /* 653_两数之和 IV - 输入 BST.cpp */; };
		3B44FAC725949C0100B29245 /* 404_左叶子之和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B44FAC525949C0100B29245 /* 404_左叶子之和.cpp */; };
		3B5461C625987E7900BEAE0B /* 993_二叉树的堂兄弟节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5461C425987E7900BEAE0B /* 993_二叉树的堂兄弟节点.cpp */; };
		3B5461D52598873300BEAE0B /* 112_路径总和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5461D32598873300BEAE0B /* 112_路径总和.cpp */; };
		3B5461D925988F3900BEAE0B /* 501_二叉搜索树中的众数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5461D725988F3900BEAE0B /* 501_二叉搜索树中的众数.cpp */; };
		3B5461DD25989F3000BEAE0B /* 572_另一个树的子树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5461DB25989F3000BEAE0B /* 572_另一个树的子树.cpp */; };
		3B5461E22599BB1300BEAE0B /* 671_二叉树中第二小的节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5461E02599BB1300BEAE0B /* 671_二叉树中第二小的节点.cpp */; };
		3B59F34425CBE58300B6317A /* 51_N皇后.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B59F34225CBE58300B6317A /* 51_N皇后.cpp */; };
		3B59F34925CD2D2100B6317A /* 53_最大子序和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B59F34725CD2D2100B6317A /* 53_最大子序和.cpp */; };
		3B5A406525E78A400079329D /* _offer_03_数组中重复的数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5A406325E78A400079329D /* _offer_03_数组中重复的数字.cpp */; };
		3B5A406A25E7955F0079329D /* 剑指 Offer 58 - II. 左旋转字符串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5A406825E7955F0079329D /* 剑指 Offer 58 - II. 左旋转字符串.cpp */; };
		3B5A407325E79DE60079329D /* 剑指 Offer 22. 链表中倒数第k个节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5A407125E79DE60079329D /* 剑指 Offer 22. 链表中倒数第k个节点.cpp */; };
		3B5A407925E7A2450079329D /* 剑指 Offer 04. 二维数组中的查找.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5A407725E7A2450079329D /* 剑指 Offer 04. 二维数组中的查找.cpp */; };
		3B5A407F25E7A5790079329D /* 剑指 Offer 05. 替换空格.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5A407D25E7A5790079329D /* 剑指 Offer 05. 替换空格.cpp */; };
		3B5A408525E7AC0D0079329D /* 剑指 Offer 06. 从尾到头打印链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5A408325E7AC0D0079329D /* 剑指 Offer 06. 从尾到头打印链表.cpp */; };
		3B5A408B25E7AF510079329D /* 剑指 Offer 07. 重建二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5A408925E7AF510079329D /* 剑指 Offer 07. 重建二叉树.cpp */; };
		3B5A409125E7C30E0079329D /* 105.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5A408F25E7C30E0079329D /* 105.cpp */; };
		3B5A409525E7C5ED0079329D /* 剑指 Offer 09. 用两个栈实现队列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5A409325E7C5ED0079329D /* 剑指 Offer 09. 用两个栈实现队列.cpp */; };
		3B5A409C25E7C8050079329D /* 剑指 Offer 10- I. 斐波那契数列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5A409A25E7C8050079329D /* 剑指 Offer 10- I. 斐波那契数列.cpp */; };
		3B5A40A225E7CABF0079329D /* 剑指 Offer 10- II. 青蛙跳台阶问题.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5A40A025E7CABF0079329D /* 剑指 Offer 10- II. 青蛙跳台阶问题.cpp */; };
		3B5A40A825E7CCA10079329D /* 剑指 Offer 11. 旋转数组的最小数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5A40A625E7CCA10079329D /* 剑指 Offer 11. 旋转数组的最小数字.cpp */; };
		3B5A40AE25E7CF130079329D /* 剑指 Offer 12. 矩阵中的路径.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B5A40AC25E7CF130079329D /* 剑指 Offer 12. 矩阵中的路径.cpp */; };
		3B846D8825A447D20072AAAB /* 814_二叉树剪枝.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B846D8625A447D20072AAAB /* 814_二叉树剪枝.cpp */; };
		3B846D8C25A449E90072AAAB /* 1104_二叉树寻路.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B846D8A25A449E90072AAAB /* 1104_二叉树寻路.cpp */; };
		3B846D9025A455670072AAAB /* 1448_统计二叉树中好节点的数目.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B846D8E25A455670072AAAB /* 1448_统计二叉树中好节点的数目.cpp */; };
		3B846D9425A45C170072AAAB /* 979_在二叉树中分配硬币.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B846D9225A45C170072AAAB /* 979_在二叉树中分配硬币.cpp */; };
		3B846D9825A462C30072AAAB /* 96_不同的二叉搜索树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B846D9625A462C30072AAAB /* 96_不同的二叉搜索树.cpp */; };
		3B846D9C25A465C70072AAAB /* 1123_最深叶节点的最近公共祖先.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B846D9A25A465C70072AAAB /* 1123_最深叶节点的最近公共祖先.cpp */; };
		3B846DA025A5A2030072AAAB /* 116_填充每个节点的下一个右侧节点指针.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B846D9E25A5A2030072AAAB /* 116_填充每个节点的下一个右侧节点指针.cpp */; };
		3B846DA425A5AC880072AAAB /* 429_N 叉树的层序遍历.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B846DA225A5AC880072AAAB /* 429_N 叉树的层序遍历.cpp */; };
		3B846DA825A5B14B0072AAAB /* 95_不同的二叉搜索树 II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B846DA625A5B14B0072AAAB /* 95_不同的二叉搜索树 II.cpp */; };
		3B90ACBB25DBCBCA008693D3 /* 88_合并两个有序数组.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B90ACB925DBCBCA008693D3 /* 88_合并两个有序数组.cpp */; };
		3B90ACC225DBE126008693D3 /* 75_颜色分类.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B90ACC025DBE126008693D3 /* 75_颜色分类.cpp */; };
		3B90ACC725DBE980008693D3 /* faceTest_1616_部分排序.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B90ACC525DBE980008693D3 /* faceTest_1616_部分排序.cpp */; };
		3B90ACCB25DBF459008693D3 /* 164_最大间距.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B90ACC925DBF459008693D3 /* 164_最大间距.cpp */; };
		3B90ACCF25DCF733008693D3 /* 977_有序数组的平方.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3B90ACCD25DCF733008693D3 /* 977_有序数组的平方.cpp */; };
		3BAB0A5C259C57070078AD65 /* 173_二叉搜索树迭代器.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BAB0A5A259C57070078AD65 /* 173_二叉搜索树迭代器.cpp */; };
		3BB1949225CFD07E006344FF /* 322_零钱兑换.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BB1949025CFD07E006344FF /* 322_零钱兑换.cpp */; };
		3BB1949625CFE7B5006344FF /* 518_零钱兑换II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BB1949425CFE7B5006344FF /* 518_零钱兑换II.cpp */; };
		3BBC5DDD258E1124004CC98D /* Offer_54_二叉搜索树的第k大节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BBC5DDB258E1124004CC98D /* Offer_54_二叉搜索树的第k大节点.cpp */; };
		3BBC5DE2258E1638004CC98D /* 897_递增顺序查找树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BBC5DE0258E1638004CC98D /* 897_递增顺序查找树.cpp */; };
		3BBC5DE6258E2183004CC98D /* Offer_68_1_二叉搜索树的最近公共祖先.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BBC5DE4258E2183004CC98D /* Offer_68_1_二叉搜索树的最近公共祖先.cpp */; };
		3BBC5DEA258E21C7004CC98D /* 637_二叉树的层平均值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BBC5DE8258E21C7004CC98D /* 637_二叉树的层平均值.cpp */; };
		3BC55D1F258B8D4B0039D0D1 /* 617_合并二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BC55D1D258B8D4A0039D0D1 /* 617_合并二叉树.cpp */; };
		3BC7B3672590BE4B002FD4EF /* 965_单值二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BC7B3652590BE4B002FD4EF /* 965_单值二叉树.cpp */; };
		3BC7B36B2590C1FC002FD4EF /* 1022_从根到叶的二进制数之和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BC7B3692590C1FC002FD4EF /* 1022_从根到叶的二进制数之和.cpp */; };
		3BC7B36F2590D100002FD4EF /* 669_修剪二叉搜索树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BC7B36D2590D100002FD4EF /* 669_修剪二叉搜索树.cpp */; };
		3BC7B3732590D997002FD4EF /* 257_二叉树的所有路径.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BC7B3712590D997002FD4EF /* 257_二叉树的所有路径.cpp */; };
		3BC97F922597223A009E9831 /* 783_二叉搜索树节点最小距离.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BC97F902597223A009E9831 /* 783_二叉搜索树节点最小距离.cpp */; };
		3BC97F96259726A7009E9831 /* 606_根据二叉树创建字符串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BC97F94259726A7009E9831 /* 606_根据二叉树创建字符串.cpp */; };
		3BC97F9A25976497009E9831 /* 110_平衡二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BC97F9825976497009E9831 /* 110_平衡二叉树.cpp */; };
		3BC97F9E25976B32009E9831 /* 543_二叉树的直径.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BC97F9C25976B32009E9831 /* 543_二叉树的直径.cpp */; };
		3BCBE21725D26577000CFD5E /* 70_爬楼梯.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BCBE21525D26577000CFD5E /* 70_爬楼梯.cpp */; };
		3BCBE22025D2745D000CFD5E /* 860_柠檬水找零.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BCBE21E25D2745D000CFD5E /* 860_柠檬水找零.cpp */; };
		3BCBE22425D27BAA000CFD5E /* 121_买卖股票的最佳时机.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BCBE22225D27BAA000CFD5E /* 121_买卖股票的最佳时机.cpp */; };
		3BCBE22825D28371000CFD5E /* 746_使用最小花费爬楼梯.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BCBE22625D28371000CFD5E /* 746_使用最小花费爬楼梯.cpp */; };
		3BCBE22C25D28D6E000CFD5E /* faceTest_1716_按摩师.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BCBE22A25D28D6E000CFD5E /* faceTest_1716_按摩师.cpp */; };
		3BCBE23025D29368000CFD5E /* 198_打家劫舍.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BCBE22E25D29368000CFD5E /* 198_打家劫舍.cpp */; };
		3BDBBAC925D7B62E00610886 /* 300_最长递增子序列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BDBBAC725D7B62E00610886 /* 300_最长递增子序列.cpp */; };
		3BDBBACD25D7CDE500610886 /* 1143_最长公共子序列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BDBBACB25D7CDE500610886 /* 1143_最长公共子序列.cpp */; };
		3BDBBAD125D9185000610886 /* 9999_01背包.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BDBBACF25D9185000610886 /* 9999_01背包.cpp */; };
		3BDBBAD525D91E4300610886 /* 9998_最长公共子串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BDBBAD325D91E4300610886 /* 9998_最长公共子串.cpp */; };
		3BE300FF258DFF9000044E78 /* 938_二叉搜索树的范围和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE300FD258DFF9000044E78 /* 938_二叉搜索树的范围和.cpp */; };
		3BE30103258E038C00044E78 /* 700_二叉搜索树中的搜索.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE30101258E038C00044E78 /* 700_二叉搜索树中的搜索.cpp */; };
		3BE30107258E0A1B00044E78 /* 108_将有序数组转换为二叉搜索树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE30105258E0A1B00044E78 /* 108_将有序数组转换为二叉搜索树.cpp */; };
		3BE3DF3E25DD0E92008FD20B /* 2_两数相加.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF3C25DD0E92008FD20B /* 2_两数相加.cpp */; };
		3BE3DF4225DD244D008FD20B /* 86_分隔链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF4025DD244D008FD20B /* 86_分隔链表.cpp */; };
		3BE3DF4625DD4622008FD20B /* 138_复制带随机指针的链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF4425DD4622008FD20B /* 138_复制带随机指针的链表.cpp */; };
		3BE3DF4B25DE4141008FD20B /* 25_K 个一组翻转链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF4925DE4141008FD20B /* 25_K 个一组翻转链表.cpp */; };
		3BE3DF4F25DE5D31008FD20B /* 23_合并K个升序链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF4D25DE5D30008FD20B /* 23_合并K个升序链表.cpp */; };
		3BE3DF5325DE7742008FD20B /* 19_删除链表的倒数第 N 个结点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF5125DE7742008FD20B /* 19_删除链表的倒数第 N 个结点.cpp */; };
		3BE3DF5725DE8833008FD20B /* 148_排序链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF5525DE8832008FD20B /* 148_排序链表.cpp */; };
		3BE3DF5C25DFB58E008FD20B /* 328_奇偶链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF5A25DFB58E008FD20B /* 328_奇偶链表.cpp */; };
		3BE3DF6025DFBC22008FD20B /* 118_杨辉三角.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF5E25DFBC22008FD20B /* 118_杨辉三角.cpp */; };
		3BE3DF6425DFC0F6008FD20B /* 122_买卖股票的最佳时机 II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF6225DFC0F6008FD20B /* 122_买卖股票的最佳时机 II.cpp */; };
		3BE3DF6825DFCB66008FD20B /* 169_多数元素.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF6625DFCB66008FD20B /* 169_多数元素.cpp */; };
		3BE3DF6C25DFD2D7008FD20B /* 283_移动零.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF6A25DFD2D7008FD20B /* 283_移动零.cpp */; };
		3BE3DF7725DFDE4D008FD20B /* 268_丢失的数字.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF7525DFDE4D008FD20B /* 268_丢失的数字.cpp */; };
		3BE3DF7C25DFE878008FD20B /* 217_存在重复元素.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF7A25DFE878008FD20B /* 217_存在重复元素.cpp */; };
		3BE3DF8025DFEC3D008FD20B /* 26_删除排序数组中的重复项.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF7E25DFEC3D008FD20B /* 26_删除排序数组中的重复项.cpp */; };
		3BE3DF8425DFF193008FD20B /* 1_两数之和.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE3DF8225DFF193008FD20B /* 1_两数之和.cpp */; };
		3BE61F42259C5C9500CA2084 /* 1305_两棵二叉搜索树中的所有元素.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE61F40259C5C9500CA2084 /* 1305_两棵二叉搜索树中的所有元素.cpp */; };
		3BE61F46259C645800CA2084 /* 1325_删除给定值的叶子节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE61F44259C645800CA2084 /* 1325_删除给定值的叶子节点.cpp */; };
		3BE61F4A259C704500CA2084 /* 1261_在受污染的二叉树中查找元素.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BE61F48259C704500CA2084 /* 1261_在受污染的二叉树中查找元素.cpp */; };
		3BFC2A4C25A2EED300F04ED1 /* 230_二叉搜索树中第K小的元素.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BFC2A4A25A2EED300F04ED1 /* 230_二叉搜索树中第K小的元素.cpp */; };
		3BFC2A5025A2F6AB00F04ED1 /* 1008_前序遍历构造二叉搜索树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BFC2A4E25A2F6AB00F04ED1 /* 1008_前序遍历构造二叉搜索树.cpp */; };
		3BFC2A5425A3010200F04ED1 /* 513_找树左下角的值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BFC2A5225A3010200F04ED1 /* 513_找树左下角的值.cpp */; };
		3BFC2A5825A30F9800F04ED1 /* 701_二叉搜索树中的插入操作.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 3BFC2A5625A30F9800F04ED1 /* 701_二叉搜索树中的插入操作.cpp */; };
		65118AE72508CFBD004D8F15 /* 509_斐波那契数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65118AE62508CFBD004D8F15 /* 509_斐波那契数.cpp */; };
		65118AE92508D175004D8F15 /* 5_最长回文子串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65118AE82508D175004D8F15 /* 5_最长回文子串.cpp */; };
		65118AEF2508EA58004D8F15 /* 237_删除链表中的节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65118AED2508EA58004D8F15 /* 237_删除链表中的节点.cpp */; };
		65118AF32508EC4B004D8F15 /* 14_最长公共前缀.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65118AF12508EC4B004D8F15 /* 14_最长公共前缀.cpp */; };
		65118AF82508F3E4004D8F15 /* 206_反转链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65118AF62508F3E4004D8F15 /* 206_反转链表.cpp */; };
		65118AFB2508F836004D8F15 /* ListNode.hpp in Sources */ = {isa = PBXBuildFile; fileRef = 65118AFA2508F836004D8F15 /* ListNode.hpp */; };
		65118AFE2508FF79004D8F15 /* 141_环形链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65118AFC2508FF79004D8F15 /* 141_环形链表.cpp */; };
		65282CFC250F5E0C00CEFC94 /* faceTest_0206_回文链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65282CFA250F5E0C00CEFC94 /* faceTest_0206_回文链表.cpp */; };
		65282CFF250F6DE000CEFC94 /* 234_回文链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65282CFD250F6DE000CEFC94 /* 234_回文链表.cpp */; };
		654466B72509111000E5959E /* 83_删除排序链表中的重复元素.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 654466B52509111000E5959E /* 83_删除排序链表中的重复元素.cpp */; };
		654466BA2509134800E5959E /* 876_链表的中间节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 654466B82509134800E5959E /* 876_链表的中间节点.cpp */; };
		6546F4612510DF8E0016F09D /* 856_括号的分数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 6546F45F2510DF8E0016F09D /* 856_括号的分数.cpp */; };
		6546F4642510F0730016F09D /* 150_逆波兰表达式求值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 6546F4622510F0730016F09D /* 150_逆波兰表达式求值.cpp */; };
		6546F4672510F5650016F09D /* 224_基本计算器.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 6546F4652510F5650016F09D /* 224_基本计算器.cpp */; };
		6546F46C2511ED570016F09D /* 232_用栈实现队列.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 6546F46A2511ED570016F09D /* 232_用栈实现队列.cpp */; };
		6546F46F2511F2D30016F09D /* 1021_删除最外层的括号.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 6546F46D2511F2D30016F09D /* 1021_删除最外层的括号.cpp */; };
		658295E124ED057E0077E48E /* main.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 658295E024ED057E0077E48E /* main.cpp */; };
		65870726250B9C5D005BFEC2 /* 1290_二进制链表转整数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65870724250B9C5D005BFEC2 /* 1290_二进制链表转整数.cpp */; };
		65870729250BA06C005BFEC2 /* offer_22_链表中倒数第k个节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65870727250BA06C005BFEC2 /* offer_22_链表中倒数第k个节点.cpp */; };
		6587072C250BA320005BFEC2 /* faceTest_0202_返回倒数第 k 个节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 6587072A250BA320005BFEC2 /* faceTest_0202_返回倒数第 k 个节点.cpp */; };
		6587072F250BA768005BFEC2 /* offer_06_从尾到头打印链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 6587072D250BA768005BFEC2 /* offer_06_从尾到头打印链表.cpp */; };
		65870732250BB3F1005BFEC2 /* offer_24_反转链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65870730250BB3F1005BFEC2 /* offer_24_反转链表.cpp */; };
		65870735250BB560005BFEC2 /* faceTest_0201_移除重复节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65870733250BB560005BFEC2 /* faceTest_0201_移除重复节点.cpp */; };
		65A1285A25135967008E24AF /* 1544_整理字符串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65A1285825135967008E24AF /* 1544_整理字符串.cpp */; };
		65A1285E251374BE008E24AF /* 225_用队列实现栈.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65A1285C251374BE008E24AF /* 225_用队列实现栈.cpp */; };
		65A1286425138DAE008E24AF /* 933_最近的请求次数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65A1286225138DAE008E24AF /* 933_最近的请求次数.cpp */; };
		65A1286925139293008E24AF /* offer_59_滑动窗口的最大值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65A1286725139293008E24AF /* offer_59_滑动窗口的最大值.cpp */; };
		65A1286D2513A84B008E24AF /* 239_滑动窗口最大值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65A1286B2513A84B008E24AF /* 239_滑动窗口最大值.cpp */; };
		65A9D3EA251B234800244EFF /* 107_二叉树的层次遍历 II.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65A9D3E8251B234800244EFF /* 107_二叉树的层次遍历 II.cpp */; };
		65A9D3EE251B239000244EFF /* 662_二叉树最大宽度.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65A9D3EC251B239000244EFF /* 662_二叉树最大宽度.cpp */; };
		65A9D3F2251B23E000244EFF /* 589_N叉树的前序遍历.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65A9D3F0251B23E000244EFF /* 589_N叉树的前序遍历.cpp */; };
		65A9D3F6251B240D00244EFF /* 590_N叉树的后序遍历.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65A9D3F4251B240D00244EFF /* 590_N叉树的后序遍历.cpp */; };
		65A9D3FA251B243700244EFF /* 559_N叉树的最大深度.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65A9D3F8251B243700244EFF /* 559_N叉树的最大深度.cpp */; };
		65A9D3FE251B246900244EFF /* 114_二叉树展开为链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65A9D3FC251B246900244EFF /* 114_二叉树展开为链表.cpp */; };
		65A9D402251B249A00244EFF /* 101_对称二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65A9D400251B249900244EFF /* 101_对称二叉树.cpp */; };
		65A9D406251B24CF00244EFF /* 889_根据前序和后序遍历构造二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65A9D404251B24CF00244EFF /* 889_根据前序和后序遍历构造二叉树.cpp */; };
		65A9D40A251B24FE00244EFF /* 106_从中序与后序遍历序列构造二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65A9D408251B24FE00244EFF /* 106_从中序与后序遍历序列构造二叉树.cpp */; };
		65A9D40E251B252600244EFF /* 105_从前序与中序遍历序列构造二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65A9D40C251B252600244EFF /* 105_从前序与中序遍历序列构造二叉树.cpp */; };
		65B5374C250903DB00FE9807 /* 203_移除链表元素.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65B5374A250903DB00FE9807 /* 203_移除链表元素.cpp */; };
		65B6820F250F583A00C039AB /* 160_相交链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65B6820D250F583A00C039AB /* 160_相交链表.cpp */; };
		65C28C6A2519DA9F00C94E7C /* 226_翻转二叉树.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65C28C682519DA9F00C94E7C /* 226_翻转二叉树.cpp */; };
		65CCFBC6250F75E700ECC563 /* 20_有效的括号.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65CCFBC4250F75E700ECC563 /* 20_有效的括号.cpp */; };
		65D2EAB1250F4214009DC352 /* faceTest_0207_链表相交.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65D2EAAF250F4214009DC352 /* faceTest_0207_链表相交.cpp */; };
		65D2EAB4250F4AE0009DC352 /* 21_合并两个有序链表.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65D2EAB2250F4AE0009DC352 /* 21_合并两个有序链表.cpp */; };
		65D2EAB7250F52D5009DC352 /* offer_52_两个链表的第一个公共节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65D2EAB5250F52D5009DC352 /* offer_52_两个链表的第一个公共节点.cpp */; };
		65D2EABA250F53E9009DC352 /* offer_18_删除链表的节点.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65D2EAB8250F53E9009DC352 /* offer_18_删除链表的节点.cpp */; };
		65DF9BD42519F6F70055E0BE /* 144_二叉树的前序遍历.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65DF9BD22519F6F70055E0BE /* 144_二叉树的前序遍历.cpp */; };
		65DF9BD9251A03860055E0BE /* 145_二叉树的后序遍历.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65DF9BD7251A03860055E0BE /* 145_二叉树的后序遍历.cpp */; };
		65DF9BDE251A27610055E0BE /* 94_二叉树的中序遍历.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65DF9BDC251A27610055E0BE /* 94_二叉树的中序遍历.cpp */; };
		65DF9BE3251A30320055E0BE /* 102_二叉树的层序遍历.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65DF9BE1251A30320055E0BE /* 102_二叉树的层序遍历.cpp */; };
		65DF9BE7251A33320055E0BE /* 104_二叉树的最大深度.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65DF9BE5251A33320055E0BE /* 104_二叉树的最大深度.cpp */; };
		65FA4BDC2511F9D000FB8651 /* 1047__删除字符串中的所有相邻重复项.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65FA4BDA2511F9D000FB8651 /* 1047__删除字符串中的所有相邻重复项.cpp */; };
		65FA4BDF2511FFB700FB8651 /* 682_棒球比赛.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65FA4BDD2511FFB700FB8651 /* 682_棒球比赛.cpp */; };
		65FA4BE22512024E00FB8651 /* 496_下一个更大元素 I.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65FA4BE02512024E00FB8651 /* 496_下一个更大元素 I.cpp */; };
		65FA4BE5251205FA00FB8651 /* 1441_用栈操作构建数组.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65FA4BE3251205FA00FB8651 /* 1441_用栈操作构建数组.cpp */; };
		65FA4BE825120AD000FB8651 /* faceTest_0302_栈的最小值.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65FA4BE625120AD000FB8651 /* faceTest_0302_栈的最小值.cpp */; };
		65FA4BEB25120D8D00FB8651 /* 844_比较含退格的字符串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 65FA4BE925120D8D00FB8651 /* 844_比较含退格的字符串.cpp */; };
		8D0C411B25E00D0900845117 /* 66_加一.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8D0C411925E00D0900845117 /* 66_加一.cpp */; };
		8D0C411F25E0111300845117 /* 78_子集.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8D0C411D25E0111300845117 /* 78_子集.cpp */; };
		8D0C412325E016F500845117 /* 289_生命游戏.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8D0C412125E016F500845117 /* 289_生命游戏.cpp */; };
		8D0C412725E027D600845117 /* 48_旋转图像.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8D0C412525E027D600845117 /* 48_旋转图像.cpp */; };
		8D0C412B25E02EAD00845117 /* 238_除自身以外数组的乘积.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8D0C412925E02EAD00845117 /* 238_除自身以外数组的乘积.cpp */; };
		8D0C412F25E034D400845117 /* 287_寻找重复数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8D0C412D25E034D400845117 /* 287_寻找重复数.cpp */; };
		8D2196C625E7E415003C2270 /* 剑指 Offer 13. 机器人的运动范围.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8D2196C425E7E415003C2270 /* 剑指 Offer 13. 机器人的运动范围.cpp */; };
		8D2196CC25E80390003C2270 /* 剑指 Offer 14- I. 剪绳子.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8D2196CA25E80390003C2270 /* 剑指 Offer 14- I. 剪绳子.cpp */; };
		8D2196DB25E8162E003C2270 /* 剑指 Offer 15. 二进制中1的个数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8D2196D925E8162E003C2270 /* 剑指 Offer 15. 二进制中1的个数.cpp */; };
		8D2196E125E817F7003C2270 /* 剑指 Offer 16. 数值的整数次方.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8D2196DF25E817F7003C2270 /* 剑指 Offer 16. 数值的整数次方.cpp */; };
		8D2196E725E81D80003C2270 /* 剑指 Offer 17. 打印从1到最大的n位数.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8D2196E525E81D80003C2270 /* 剑指 Offer 17. 打印从1到最大的n位数.cpp */; };
		8D2196ED25E823DB003C2270 /* 剑指 Offer 48. 最长不含重复字符的子字符串.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 8D2196EB25E823DB003C2270 /* 剑指 Offer 48. 最长不含重复字符的子字符串.cpp */; };
/* End PBXBuildFile section */

/* Begin PBXCopyFilesBuildPhase section */
		658295DB24ED057E0077E48E /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = /usr/share/man/man1/;
			dstSubfolderSpec = 0;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 1;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		3B349532259793F6007F62A7 /* fileName_tree.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = fileName_tree.h; sourceTree = "<group>"; };
		3B3C033C2599CC0400EBAA9F /* 111_二叉树的最小深度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "111_二叉树的最小深度.cpp"; sourceTree = "<group>"; };
		3B3C033D2599CC0400EBAA9F /* 111_二叉树的最小深度.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "111_二叉树的最小深度.hpp"; sourceTree = "<group>"; };
		3B3C03402599D05900EBAA9F /* 1379_找出克隆二叉树中的相同节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1379_找出克隆二叉树中的相同节点.cpp"; sourceTree = "<group>"; };
		3B3C03412599D05900EBAA9F /* 1379_找出克隆二叉树中的相同节点.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1379_找出克隆二叉树中的相同节点.hpp"; sourceTree = "<group>"; };
		3B3C03442599D25E00EBAA9F /* 654_最大二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "654_最大二叉树.cpp"; sourceTree = "<group>"; };
		3B3C03452599D25E00EBAA9F /* 654_最大二叉树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "654_最大二叉树.hpp"; sourceTree = "<group>"; };
		3B3C03482599D63700EBAA9F /* 1315_祖父节点值为偶数的节点和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1315_祖父节点值为偶数的节点和.cpp"; sourceTree = "<group>"; };
		3B3C03492599D63700EBAA9F /* 1315_祖父节点值为偶数的节点和.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1315_祖父节点值为偶数的节点和.hpp"; sourceTree = "<group>"; };
		3B3C034C2599D89C00EBAA9F /* 1302_层数最深叶子节点的和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1302_层数最深叶子节点的和.cpp"; sourceTree = "<group>"; };
		3B3C034D2599D89C00EBAA9F /* 1302_层数最深叶子节点的和.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1302_层数最深叶子节点的和.hpp"; sourceTree = "<group>"; };
		3B3C03502599DC4600EBAA9F /* 894_所有可能的满二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "894_所有可能的满二叉树.cpp"; sourceTree = "<group>"; };
		3B3C03512599DC4600EBAA9F /* 894_所有可能的满二叉树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "894_所有可能的满二叉树.hpp"; sourceTree = "<group>"; };
		3B3C0354259B08D700EBAA9F /* 222_完全二叉树的节点个数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "222_完全二叉树的节点个数.cpp"; sourceTree = "<group>"; };
		3B3C0355259B08D700EBAA9F /* 222_完全二叉树的节点个数.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "222_完全二叉树的节点个数.hpp"; sourceTree = "<group>"; };
		3B3C8A062591E5F000DEA8D3 /* 235_二叉搜索树的最近公共祖先.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "235_二叉搜索树的最近公共祖先.cpp"; sourceTree = "<group>"; };
		3B3C8A072591E5F000DEA8D3 /* 235_二叉搜索树的最近公共祖先.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "235_二叉搜索树的最近公共祖先.hpp"; sourceTree = "<group>"; };
		3B3C8A0A2591FD1800DEA8D3 /* 872_叶子相似的树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "872_叶子相似的树.cpp"; sourceTree = "<group>"; };
		3B3C8A0B2591FD1800DEA8D3 /* 872_叶子相似的树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "872_叶子相似的树.hpp"; sourceTree = "<group>"; };
		3B3C8A0F259340FD00DEA8D3 /* 530_二叉搜索树的最小绝对差.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "530_二叉搜索树的最小绝对差.cpp"; sourceTree = "<group>"; };
		3B3C8A10259340FD00DEA8D3 /* 530_二叉搜索树的最小绝对差.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "530_二叉搜索树的最小绝对差.hpp"; sourceTree = "<group>"; };
		3B3C8A1325934E7F00DEA8D3 /* 100_相同的树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "100_相同的树.cpp"; sourceTree = "<group>"; };
		3B3C8A1425934E7F00DEA8D3 /* 100_相同的树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "100_相同的树.hpp"; sourceTree = "<group>"; };
		3B44FABD25947D9200B29245 /* 563_二叉树的坡度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "563_二叉树的坡度.cpp"; sourceTree = "<group>"; };
		3B44FABE25947D9200B29245 /* 563_二叉树的坡度.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "563_二叉树的坡度.hpp"; sourceTree = "<group>"; };
		3B44FAC125948F3800B29245 /* 653_两数之和 IV - 输入 BST.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "653_两数之和 IV - 输入 BST.cpp"; sourceTree = "<group>"; };
		3B44FAC225948F3800B29245 /* 653_两数之和 IV - 输入 BST.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "653_两数之和 IV - 输入 BST.hpp"; sourceTree = "<group>"; };
		3B44FAC525949C0100B29245 /* 404_左叶子之和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "404_左叶子之和.cpp"; sourceTree = "<group>"; };
		3B44FAC625949C0100B29245 /* 404_左叶子之和.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "404_左叶子之和.hpp"; sourceTree = "<group>"; };
		3B5461C425987E7900BEAE0B /* 993_二叉树的堂兄弟节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "993_二叉树的堂兄弟节点.cpp"; sourceTree = "<group>"; };
		3B5461C525987E7900BEAE0B /* 993_二叉树的堂兄弟节点.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "993_二叉树的堂兄弟节点.hpp"; sourceTree = "<group>"; };
		3B5461D32598873300BEAE0B /* 112_路径总和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "112_路径总和.cpp"; sourceTree = "<group>"; };
		3B5461D42598873300BEAE0B /* 112_路径总和.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "112_路径总和.hpp"; sourceTree = "<group>"; };
		3B5461D725988F3900BEAE0B /* 501_二叉搜索树中的众数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "501_二叉搜索树中的众数.cpp"; sourceTree = "<group>"; };
		3B5461D825988F3900BEAE0B /* 501_二叉搜索树中的众数.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "501_二叉搜索树中的众数.hpp"; sourceTree = "<group>"; };
		3B5461DB25989F3000BEAE0B /* 572_另一个树的子树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "572_另一个树的子树.cpp"; sourceTree = "<group>"; };
		3B5461DC25989F3000BEAE0B /* 572_另一个树的子树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "572_另一个树的子树.hpp"; sourceTree = "<group>"; };
		3B5461E02599BB1300BEAE0B /* 671_二叉树中第二小的节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "671_二叉树中第二小的节点.cpp"; sourceTree = "<group>"; };
		3B5461E12599BB1300BEAE0B /* 671_二叉树中第二小的节点.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "671_二叉树中第二小的节点.hpp"; sourceTree = "<group>"; };
		3B59F34225CBE58300B6317A /* 51_N皇后.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "51_N皇后.cpp"; sourceTree = "<group>"; };
		3B59F34325CBE58300B6317A /* 51_N皇后.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "51_N皇后.hpp"; sourceTree = "<group>"; };
		3B59F34725CD2D2100B6317A /* 53_最大子序和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "53_最大子序和.cpp"; sourceTree = "<group>"; };
		3B59F34825CD2D2100B6317A /* 53_最大子序和.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "53_最大子序和.hpp"; sourceTree = "<group>"; };
		3B5A406325E78A400079329D /* _offer_03_数组中重复的数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "_offer_03_数组中重复的数字.cpp"; sourceTree = "<group>"; };
		3B5A406425E78A400079329D /* _offer_03_数组中重复的数字.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "_offer_03_数组中重复的数字.hpp"; sourceTree = "<group>"; };
		3B5A406725E794DC0079329D /* --------------重刷--------------.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "--------------重刷--------------.h"; sourceTree = "<group>"; };
		3B5A406825E7955F0079329D /* 剑指 Offer 58 - II. 左旋转字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 58 - II. 左旋转字符串.cpp"; sourceTree = "<group>"; };
		3B5A406925E7955F0079329D /* 剑指 Offer 58 - II. 左旋转字符串.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 58 - II. 左旋转字符串.hpp"; sourceTree = "<group>"; };
		3B5A406D25E795710079329D /* filename_offer.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = filename_offer.h; sourceTree = "<group>"; };
		3B5A407125E79DE60079329D /* 剑指 Offer 22. 链表中倒数第k个节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 22. 链表中倒数第k个节点.cpp"; sourceTree = "<group>"; };
		3B5A407225E79DE60079329D /* 剑指 Offer 22. 链表中倒数第k个节点.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 22. 链表中倒数第k个节点.hpp"; sourceTree = "<group>"; };
		3B5A407725E7A2450079329D /* 剑指 Offer 04. 二维数组中的查找.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 04. 二维数组中的查找.cpp"; sourceTree = "<group>"; };
		3B5A407825E7A2450079329D /* 剑指 Offer 04. 二维数组中的查找.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 04. 二维数组中的查找.hpp"; sourceTree = "<group>"; };
		3B5A407D25E7A5790079329D /* 剑指 Offer 05. 替换空格.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 05. 替换空格.cpp"; sourceTree = "<group>"; };
		3B5A407E25E7A5790079329D /* 剑指 Offer 05. 替换空格.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 05. 替换空格.hpp"; sourceTree = "<group>"; };
		3B5A408325E7AC0D0079329D /* 剑指 Offer 06. 从尾到头打印链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 06. 从尾到头打印链表.cpp"; sourceTree = "<group>"; };
		3B5A408425E7AC0D0079329D /* 剑指 Offer 06. 从尾到头打印链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 06. 从尾到头打印链表.hpp"; sourceTree = "<group>"; };
		3B5A408925E7AF510079329D /* 剑指 Offer 07. 重建二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 07. 重建二叉树.cpp"; sourceTree = "<group>"; };
		3B5A408A25E7AF510079329D /* 剑指 Offer 07. 重建二叉树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 07. 重建二叉树.hpp"; sourceTree = "<group>"; };
		3B5A408F25E7C30E0079329D /* 105.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = 105.cpp; sourceTree = "<group>"; };
		3B5A409025E7C30E0079329D /* 105.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = 105.hpp; sourceTree = "<group>"; };
		3B5A409325E7C5ED0079329D /* 剑指 Offer 09. 用两个栈实现队列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 09. 用两个栈实现队列.cpp"; sourceTree = "<group>"; };
		3B5A409425E7C5ED0079329D /* 剑指 Offer 09. 用两个栈实现队列.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 09. 用两个栈实现队列.hpp"; sourceTree = "<group>"; };
		3B5A409A25E7C8050079329D /* 剑指 Offer 10- I. 斐波那契数列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 10- I. 斐波那契数列.cpp"; sourceTree = "<group>"; };
		3B5A409B25E7C8050079329D /* 剑指 Offer 10- I. 斐波那契数列.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 10- I. 斐波那契数列.hpp"; sourceTree = "<group>"; };
		3B5A40A025E7CABF0079329D /* 剑指 Offer 10- II. 青蛙跳台阶问题.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 10- II. 青蛙跳台阶问题.cpp"; sourceTree = "<group>"; };
		3B5A40A125E7CABF0079329D /* 剑指 Offer 10- II. 青蛙跳台阶问题.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 10- II. 青蛙跳台阶问题.hpp"; sourceTree = "<group>"; };
		3B5A40A625E7CCA10079329D /* 剑指 Offer 11. 旋转数组的最小数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 11. 旋转数组的最小数字.cpp"; sourceTree = "<group>"; };
		3B5A40A725E7CCA10079329D /* 剑指 Offer 11. 旋转数组的最小数字.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 11. 旋转数组的最小数字.hpp"; sourceTree = "<group>"; };
		3B5A40AC25E7CF130079329D /* 剑指 Offer 12. 矩阵中的路径.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 12. 矩阵中的路径.cpp"; sourceTree = "<group>"; };
		3B5A40AD25E7CF130079329D /* 剑指 Offer 12. 矩阵中的路径.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 12. 矩阵中的路径.hpp"; sourceTree = "<group>"; };
		3B846D8625A447D20072AAAB /* 814_二叉树剪枝.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "814_二叉树剪枝.cpp"; sourceTree = "<group>"; };
		3B846D8725A447D20072AAAB /* 814_二叉树剪枝.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "814_二叉树剪枝.hpp"; sourceTree = "<group>"; };
		3B846D8A25A449E90072AAAB /* 1104_二叉树寻路.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1104_二叉树寻路.cpp"; sourceTree = "<group>"; };
		3B846D8B25A449E90072AAAB /* 1104_二叉树寻路.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1104_二叉树寻路.hpp"; sourceTree = "<group>"; };
		3B846D8E25A455670072AAAB /* 1448_统计二叉树中好节点的数目.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1448_统计二叉树中好节点的数目.cpp"; sourceTree = "<group>"; };
		3B846D8F25A455670072AAAB /* 1448_统计二叉树中好节点的数目.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1448_统计二叉树中好节点的数目.hpp"; sourceTree = "<group>"; };
		3B846D9225A45C170072AAAB /* 979_在二叉树中分配硬币.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "979_在二叉树中分配硬币.cpp"; sourceTree = "<group>"; };
		3B846D9325A45C170072AAAB /* 979_在二叉树中分配硬币.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "979_在二叉树中分配硬币.hpp"; sourceTree = "<group>"; };
		3B846D9625A462C30072AAAB /* 96_不同的二叉搜索树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "96_不同的二叉搜索树.cpp"; sourceTree = "<group>"; };
		3B846D9725A462C30072AAAB /* 96_不同的二叉搜索树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "96_不同的二叉搜索树.hpp"; sourceTree = "<group>"; };
		3B846D9A25A465C70072AAAB /* 1123_最深叶节点的最近公共祖先.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1123_最深叶节点的最近公共祖先.cpp"; sourceTree = "<group>"; };
		3B846D9B25A465C70072AAAB /* 1123_最深叶节点的最近公共祖先.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1123_最深叶节点的最近公共祖先.hpp"; sourceTree = "<group>"; };
		3B846D9E25A5A2030072AAAB /* 116_填充每个节点的下一个右侧节点指针.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "116_填充每个节点的下一个右侧节点指针.cpp"; sourceTree = "<group>"; };
		3B846D9F25A5A2030072AAAB /* 116_填充每个节点的下一个右侧节点指针.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "116_填充每个节点的下一个右侧节点指针.hpp"; sourceTree = "<group>"; };
		3B846DA225A5AC880072AAAB /* 429_N 叉树的层序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "429_N 叉树的层序遍历.cpp"; sourceTree = "<group>"; };
		3B846DA325A5AC880072AAAB /* 429_N 叉树的层序遍历.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "429_N 叉树的层序遍历.hpp"; sourceTree = "<group>"; };
		3B846DA625A5B14B0072AAAB /* 95_不同的二叉搜索树 II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "95_不同的二叉搜索树 II.cpp"; sourceTree = "<group>"; };
		3B846DA725A5B14B0072AAAB /* 95_不同的二叉搜索树 II.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "95_不同的二叉搜索树 II.hpp"; sourceTree = "<group>"; };
		3B90ACB925DBCBCA008693D3 /* 88_合并两个有序数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "88_合并两个有序数组.cpp"; sourceTree = "<group>"; };
		3B90ACBA25DBCBCA008693D3 /* 88_合并两个有序数组.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "88_合并两个有序数组.hpp"; sourceTree = "<group>"; };
		3B90ACBD25DBCBF2008693D3 /* fileName_array.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = fileName_array.h; sourceTree = "<group>"; };
		3B90ACC025DBE126008693D3 /* 75_颜色分类.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "75_颜色分类.cpp"; sourceTree = "<group>"; };
		3B90ACC125DBE126008693D3 /* 75_颜色分类.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "75_颜色分类.hpp"; sourceTree = "<group>"; };
		3B90ACC525DBE980008693D3 /* faceTest_1616_部分排序.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "faceTest_1616_部分排序.cpp"; sourceTree = "<group>"; };
		3B90ACC625DBE980008693D3 /* faceTest_1616_部分排序.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "faceTest_1616_部分排序.hpp"; sourceTree = "<group>"; };
		3B90ACC925DBF459008693D3 /* 164_最大间距.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "164_最大间距.cpp"; sourceTree = "<group>"; };
		3B90ACCA25DBF459008693D3 /* 164_最大间距.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "164_最大间距.hpp"; sourceTree = "<group>"; };
		3B90ACCD25DCF733008693D3 /* 977_有序数组的平方.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "977_有序数组的平方.cpp"; sourceTree = "<group>"; };
		3B90ACCE25DCF733008693D3 /* 977_有序数组的平方.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "977_有序数组的平方.hpp"; sourceTree = "<group>"; };
		3BAB0A5A259C57070078AD65 /* 173_二叉搜索树迭代器.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "173_二叉搜索树迭代器.cpp"; sourceTree = "<group>"; };
		3BAB0A5B259C57070078AD65 /* 173_二叉搜索树迭代器.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "173_二叉搜索树迭代器.hpp"; sourceTree = "<group>"; };
		3BB1949025CFD07E006344FF /* 322_零钱兑换.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "322_零钱兑换.cpp"; sourceTree = "<group>"; };
		3BB1949125CFD07E006344FF /* 322_零钱兑换.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "322_零钱兑换.hpp"; sourceTree = "<group>"; };
		3BB1949425CFE7B5006344FF /* 518_零钱兑换II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "518_零钱兑换II.cpp"; sourceTree = "<group>"; };
		3BB1949525CFE7B5006344FF /* 518_零钱兑换II.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "518_零钱兑换II.hpp"; sourceTree = "<group>"; };
		3BBC5DDB258E1124004CC98D /* Offer_54_二叉搜索树的第k大节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "Offer_54_二叉搜索树的第k大节点.cpp"; sourceTree = "<group>"; };
		3BBC5DDC258E1124004CC98D /* Offer_54_二叉搜索树的第k大节点.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "Offer_54_二叉搜索树的第k大节点.hpp"; sourceTree = "<group>"; };
		3BBC5DE0258E1638004CC98D /* 897_递增顺序查找树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "897_递增顺序查找树.cpp"; sourceTree = "<group>"; };
		3BBC5DE1258E1638004CC98D /* 897_递增顺序查找树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "897_递增顺序查找树.hpp"; sourceTree = "<group>"; };
		3BBC5DE4258E2183004CC98D /* Offer_68_1_二叉搜索树的最近公共祖先.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "Offer_68_1_二叉搜索树的最近公共祖先.cpp"; sourceTree = "<group>"; };
		3BBC5DE5258E2183004CC98D /* Offer_68_1_二叉搜索树的最近公共祖先.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "Offer_68_1_二叉搜索树的最近公共祖先.hpp"; sourceTree = "<group>"; };
		3BBC5DE8258E21C7004CC98D /* 637_二叉树的层平均值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "637_二叉树的层平均值.cpp"; sourceTree = "<group>"; };
		3BBC5DE9258E21C7004CC98D /* 637_二叉树的层平均值.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "637_二叉树的层平均值.hpp"; sourceTree = "<group>"; };
		3BC55D1D258B8D4A0039D0D1 /* 617_合并二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "617_合并二叉树.cpp"; sourceTree = "<group>"; };
		3BC55D1E258B8D4A0039D0D1 /* 617_合并二叉树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "617_合并二叉树.hpp"; sourceTree = "<group>"; };
		3BC7B3652590BE4B002FD4EF /* 965_单值二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "965_单值二叉树.cpp"; sourceTree = "<group>"; };
		3BC7B3662590BE4B002FD4EF /* 965_单值二叉树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "965_单值二叉树.hpp"; sourceTree = "<group>"; };
		3BC7B3692590C1FC002FD4EF /* 1022_从根到叶的二进制数之和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1022_从根到叶的二进制数之和.cpp"; sourceTree = "<group>"; };
		3BC7B36A2590C1FC002FD4EF /* 1022_从根到叶的二进制数之和.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1022_从根到叶的二进制数之和.hpp"; sourceTree = "<group>"; };
		3BC7B36D2590D100002FD4EF /* 669_修剪二叉搜索树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "669_修剪二叉搜索树.cpp"; sourceTree = "<group>"; };
		3BC7B36E2590D100002FD4EF /* 669_修剪二叉搜索树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "669_修剪二叉搜索树.hpp"; sourceTree = "<group>"; };
		3BC7B3712590D997002FD4EF /* 257_二叉树的所有路径.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "257_二叉树的所有路径.cpp"; sourceTree = "<group>"; };
		3BC7B3722590D997002FD4EF /* 257_二叉树的所有路径.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "257_二叉树的所有路径.hpp"; sourceTree = "<group>"; };
		3BC97F902597223A009E9831 /* 783_二叉搜索树节点最小距离.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "783_二叉搜索树节点最小距离.cpp"; sourceTree = "<group>"; };
		3BC97F912597223A009E9831 /* 783_二叉搜索树节点最小距离.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "783_二叉搜索树节点最小距离.hpp"; sourceTree = "<group>"; };
		3BC97F94259726A7009E9831 /* 606_根据二叉树创建字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "606_根据二叉树创建字符串.cpp"; sourceTree = "<group>"; };
		3BC97F95259726A7009E9831 /* 606_根据二叉树创建字符串.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "606_根据二叉树创建字符串.hpp"; sourceTree = "<group>"; };
		3BC97F9825976497009E9831 /* 110_平衡二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "110_平衡二叉树.cpp"; sourceTree = "<group>"; };
		3BC97F9925976497009E9831 /* 110_平衡二叉树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "110_平衡二叉树.hpp"; sourceTree = "<group>"; };
		3BC97F9C25976B32009E9831 /* 543_二叉树的直径.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "543_二叉树的直径.cpp"; sourceTree = "<group>"; };
		3BC97F9D25976B32009E9831 /* 543_二叉树的直径.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "543_二叉树的直径.hpp"; sourceTree = "<group>"; };
		3BCBE21525D26577000CFD5E /* 70_爬楼梯.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "70_爬楼梯.cpp"; sourceTree = "<group>"; };
		3BCBE21625D26577000CFD5E /* 70_爬楼梯.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "70_爬楼梯.hpp"; sourceTree = "<group>"; };
		3BCBE21E25D2745D000CFD5E /* 860_柠檬水找零.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "860_柠檬水找零.cpp"; sourceTree = "<group>"; };
		3BCBE21F25D2745D000CFD5E /* 860_柠檬水找零.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "860_柠檬水找零.hpp"; sourceTree = "<group>"; };
		3BCBE22225D27BAA000CFD5E /* 121_买卖股票的最佳时机.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "121_买卖股票的最佳时机.cpp"; sourceTree = "<group>"; };
		3BCBE22325D27BAA000CFD5E /* 121_买卖股票的最佳时机.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "121_买卖股票的最佳时机.hpp"; sourceTree = "<group>"; };
		3BCBE22625D28371000CFD5E /* 746_使用最小花费爬楼梯.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "746_使用最小花费爬楼梯.cpp"; sourceTree = "<group>"; };
		3BCBE22725D28371000CFD5E /* 746_使用最小花费爬楼梯.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "746_使用最小花费爬楼梯.hpp"; sourceTree = "<group>"; };
		3BCBE22A25D28D6E000CFD5E /* faceTest_1716_按摩师.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "faceTest_1716_按摩师.cpp"; sourceTree = "<group>"; };
		3BCBE22B25D28D6E000CFD5E /* faceTest_1716_按摩师.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "faceTest_1716_按摩师.hpp"; sourceTree = "<group>"; };
		3BCBE22E25D29368000CFD5E /* 198_打家劫舍.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "198_打家劫舍.cpp"; sourceTree = "<group>"; };
		3BCBE22F25D29368000CFD5E /* 198_打家劫舍.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "198_打家劫舍.hpp"; sourceTree = "<group>"; };
		3BD267D2258A11D000B698E0 /* yufa.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = yufa.h; sourceTree = "<group>"; };
		3BDBBAC725D7B62E00610886 /* 300_最长递增子序列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "300_最长递增子序列.cpp"; sourceTree = "<group>"; };
		3BDBBAC825D7B62E00610886 /* 300_最长递增子序列.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "300_最长递增子序列.hpp"; sourceTree = "<group>"; };
		3BDBBACB25D7CDE500610886 /* 1143_最长公共子序列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1143_最长公共子序列.cpp"; sourceTree = "<group>"; };
		3BDBBACC25D7CDE500610886 /* 1143_最长公共子序列.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1143_最长公共子序列.hpp"; sourceTree = "<group>"; };
		3BDBBACF25D9185000610886 /* 9999_01背包.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "9999_01背包.cpp"; sourceTree = "<group>"; };
		3BDBBAD025D9185000610886 /* 9999_01背包.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "9999_01背包.hpp"; sourceTree = "<group>"; };
		3BDBBAD325D91E4300610886 /* 9998_最长公共子串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "9998_最长公共子串.cpp"; sourceTree = "<group>"; };
		3BDBBAD425D91E4300610886 /* 9998_最长公共子串.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "9998_最长公共子串.hpp"; sourceTree = "<group>"; };
		3BE300FD258DFF9000044E78 /* 938_二叉搜索树的范围和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "938_二叉搜索树的范围和.cpp"; sourceTree = "<group>"; };
		3BE300FE258DFF9000044E78 /* 938_二叉搜索树的范围和.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "938_二叉搜索树的范围和.hpp"; sourceTree = "<group>"; };
		3BE30101258E038C00044E78 /* 700_二叉搜索树中的搜索.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "700_二叉搜索树中的搜索.cpp"; sourceTree = "<group>"; };
		3BE30102258E038C00044E78 /* 700_二叉搜索树中的搜索.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "700_二叉搜索树中的搜索.hpp"; sourceTree = "<group>"; };
		3BE30105258E0A1B00044E78 /* 108_将有序数组转换为二叉搜索树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "108_将有序数组转换为二叉搜索树.cpp"; sourceTree = "<group>"; };
		3BE30106258E0A1B00044E78 /* 108_将有序数组转换为二叉搜索树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "108_将有序数组转换为二叉搜索树.hpp"; sourceTree = "<group>"; };
		3BE3DF3C25DD0E92008FD20B /* 2_两数相加.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "2_两数相加.cpp"; sourceTree = "<group>"; };
		3BE3DF3D25DD0E92008FD20B /* 2_两数相加.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "2_两数相加.hpp"; sourceTree = "<group>"; };
		3BE3DF4025DD244D008FD20B /* 86_分隔链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "86_分隔链表.cpp"; sourceTree = "<group>"; };
		3BE3DF4125DD244D008FD20B /* 86_分隔链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "86_分隔链表.hpp"; sourceTree = "<group>"; };
		3BE3DF4425DD4622008FD20B /* 138_复制带随机指针的链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "138_复制带随机指针的链表.cpp"; sourceTree = "<group>"; };
		3BE3DF4525DD4622008FD20B /* 138_复制带随机指针的链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "138_复制带随机指针的链表.hpp"; sourceTree = "<group>"; };
		3BE3DF4925DE4141008FD20B /* 25_K 个一组翻转链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "25_K 个一组翻转链表.cpp"; sourceTree = "<group>"; };
		3BE3DF4A25DE4141008FD20B /* 25_K 个一组翻转链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "25_K 个一组翻转链表.hpp"; sourceTree = "<group>"; };
		3BE3DF4D25DE5D30008FD20B /* 23_合并K个升序链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "23_合并K个升序链表.cpp"; sourceTree = "<group>"; };
		3BE3DF4E25DE5D31008FD20B /* 23_合并K个升序链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "23_合并K个升序链表.hpp"; sourceTree = "<group>"; };
		3BE3DF5125DE7742008FD20B /* 19_删除链表的倒数第 N 个结点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "19_删除链表的倒数第 N 个结点.cpp"; sourceTree = "<group>"; };
		3BE3DF5225DE7742008FD20B /* 19_删除链表的倒数第 N 个结点.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "19_删除链表的倒数第 N 个结点.hpp"; sourceTree = "<group>"; };
		3BE3DF5525DE8832008FD20B /* 148_排序链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "148_排序链表.cpp"; sourceTree = "<group>"; };
		3BE3DF5625DE8832008FD20B /* 148_排序链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "148_排序链表.hpp"; sourceTree = "<group>"; };
		3BE3DF5A25DFB58E008FD20B /* 328_奇偶链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "328_奇偶链表.cpp"; sourceTree = "<group>"; };
		3BE3DF5B25DFB58E008FD20B /* 328_奇偶链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "328_奇偶链表.hpp"; sourceTree = "<group>"; };
		3BE3DF5E25DFBC22008FD20B /* 118_杨辉三角.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "118_杨辉三角.cpp"; sourceTree = "<group>"; };
		3BE3DF5F25DFBC22008FD20B /* 118_杨辉三角.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "118_杨辉三角.hpp"; sourceTree = "<group>"; };
		3BE3DF6225DFC0F6008FD20B /* 122_买卖股票的最佳时机 II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "122_买卖股票的最佳时机 II.cpp"; sourceTree = "<group>"; };
		3BE3DF6325DFC0F6008FD20B /* 122_买卖股票的最佳时机 II.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "122_买卖股票的最佳时机 II.hpp"; sourceTree = "<group>"; };
		3BE3DF6625DFCB66008FD20B /* 169_多数元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "169_多数元素.cpp"; sourceTree = "<group>"; };
		3BE3DF6725DFCB66008FD20B /* 169_多数元素.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "169_多数元素.hpp"; sourceTree = "<group>"; };
		3BE3DF6A25DFD2D7008FD20B /* 283_移动零.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "283_移动零.cpp"; sourceTree = "<group>"; };
		3BE3DF6B25DFD2D7008FD20B /* 283_移动零.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "283_移动零.hpp"; sourceTree = "<group>"; };
		3BE3DF7525DFDE4D008FD20B /* 268_丢失的数字.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "268_丢失的数字.cpp"; sourceTree = "<group>"; };
		3BE3DF7625DFDE4D008FD20B /* 268_丢失的数字.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "268_丢失的数字.hpp"; sourceTree = "<group>"; };
		3BE3DF7A25DFE878008FD20B /* 217_存在重复元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "217_存在重复元素.cpp"; sourceTree = "<group>"; };
		3BE3DF7B25DFE878008FD20B /* 217_存在重复元素.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "217_存在重复元素.hpp"; sourceTree = "<group>"; };
		3BE3DF7E25DFEC3D008FD20B /* 26_删除排序数组中的重复项.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "26_删除排序数组中的重复项.cpp"; sourceTree = "<group>"; };
		3BE3DF7F25DFEC3D008FD20B /* 26_删除排序数组中的重复项.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "26_删除排序数组中的重复项.hpp"; sourceTree = "<group>"; };
		3BE3DF8225DFF193008FD20B /* 1_两数之和.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1_两数之和.cpp"; sourceTree = "<group>"; };
		3BE3DF8325DFF193008FD20B /* 1_两数之和.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1_两数之和.hpp"; sourceTree = "<group>"; };
		3BE61F40259C5C9500CA2084 /* 1305_两棵二叉搜索树中的所有元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1305_两棵二叉搜索树中的所有元素.cpp"; sourceTree = "<group>"; };
		3BE61F41259C5C9500CA2084 /* 1305_两棵二叉搜索树中的所有元素.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1305_两棵二叉搜索树中的所有元素.hpp"; sourceTree = "<group>"; };
		3BE61F44259C645800CA2084 /* 1325_删除给定值的叶子节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1325_删除给定值的叶子节点.cpp"; sourceTree = "<group>"; };
		3BE61F45259C645800CA2084 /* 1325_删除给定值的叶子节点.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1325_删除给定值的叶子节点.hpp"; sourceTree = "<group>"; };
		3BE61F48259C704500CA2084 /* 1261_在受污染的二叉树中查找元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1261_在受污染的二叉树中查找元素.cpp"; sourceTree = "<group>"; };
		3BE61F49259C704500CA2084 /* 1261_在受污染的二叉树中查找元素.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1261_在受污染的二叉树中查找元素.hpp"; sourceTree = "<group>"; };
		3BED9E7925DD02C400866BE5 /* filename_listNode.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = filename_listNode.h; sourceTree = "<group>"; };
		3BED9E7D25DD034300866BE5 /* --------------链表--------------.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "--------------链表--------------.h"; sourceTree = "<group>"; };
		3BED9E7E25DD035100866BE5 /* --------------数组--------------.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "--------------数组--------------.h"; sourceTree = "<group>"; };
		3BED9E7F25DD036700866BE5 /* --------------动态规划--------------.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "--------------动态规划--------------.h"; sourceTree = "<group>"; };
		3BED9E8025DD037100866BE5 /* --------------字符串--------------.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "--------------字符串--------------.h"; sourceTree = "<group>"; };
		3BED9E8125DD037A00866BE5 /* --------------队列--------------.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "--------------队列--------------.h"; sourceTree = "<group>"; };
		3BED9E8225DD038200866BE5 /* --------------栈--------------.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "--------------栈--------------.h"; sourceTree = "<group>"; };
		3BED9E8325DD039F00866BE5 /* --------------二叉树--------------.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "--------------二叉树--------------.h"; sourceTree = "<group>"; };
		3BED9E8425DD052B00866BE5 /* filename_dp.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = filename_dp.h; sourceTree = "<group>"; };
		3BFC2A4A25A2EED300F04ED1 /* 230_二叉搜索树中第K小的元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "230_二叉搜索树中第K小的元素.cpp"; sourceTree = "<group>"; };
		3BFC2A4B25A2EED300F04ED1 /* 230_二叉搜索树中第K小的元素.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "230_二叉搜索树中第K小的元素.hpp"; sourceTree = "<group>"; };
		3BFC2A4E25A2F6AB00F04ED1 /* 1008_前序遍历构造二叉搜索树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1008_前序遍历构造二叉搜索树.cpp"; sourceTree = "<group>"; };
		3BFC2A4F25A2F6AB00F04ED1 /* 1008_前序遍历构造二叉搜索树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1008_前序遍历构造二叉搜索树.hpp"; sourceTree = "<group>"; };
		3BFC2A5225A3010200F04ED1 /* 513_找树左下角的值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "513_找树左下角的值.cpp"; sourceTree = "<group>"; };
		3BFC2A5325A3010200F04ED1 /* 513_找树左下角的值.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "513_找树左下角的值.hpp"; sourceTree = "<group>"; };
		3BFC2A5625A30F9800F04ED1 /* 701_二叉搜索树中的插入操作.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "701_二叉搜索树中的插入操作.cpp"; sourceTree = "<group>"; };
		3BFC2A5725A30F9800F04ED1 /* 701_二叉搜索树中的插入操作.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "701_二叉搜索树中的插入操作.hpp"; sourceTree = "<group>"; };
		65118AE62508CFBD004D8F15 /* 509_斐波那契数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "509_斐波那契数.cpp"; sourceTree = "<group>"; };
		65118AE82508D175004D8F15 /* 5_最长回文子串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "5_最长回文子串.cpp"; sourceTree = "<group>"; };
		65118AEA2508D41C004D8F15 /* 509_斐波那契数.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "509_斐波那契数.hpp"; sourceTree = "<group>"; };
		65118AEB2508D444004D8F15 /* 5_最长回文子串.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "5_最长回文子串.hpp"; sourceTree = "<group>"; };
		65118AED2508EA58004D8F15 /* 237_删除链表中的节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "237_删除链表中的节点.cpp"; sourceTree = "<group>"; };
		65118AEE2508EA58004D8F15 /* 237_删除链表中的节点.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "237_删除链表中的节点.hpp"; sourceTree = "<group>"; };
		65118AF12508EC4B004D8F15 /* 14_最长公共前缀.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "14_最长公共前缀.cpp"; sourceTree = "<group>"; };
		65118AF22508EC4B004D8F15 /* 14_最长公共前缀.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "14_最长公共前缀.hpp"; sourceTree = "<group>"; };
		65118AF42508EC7A004D8F15 /* common.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = common.h; sourceTree = "<group>"; };
		65118AF62508F3E4004D8F15 /* 206_反转链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "206_反转链表.cpp"; sourceTree = "<group>"; };
		65118AF72508F3E4004D8F15 /* 206_反转链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "206_反转链表.hpp"; sourceTree = "<group>"; };
		65118AFA2508F836004D8F15 /* ListNode.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = ListNode.hpp; sourceTree = "<group>"; };
		65118AFC2508FF79004D8F15 /* 141_环形链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "141_环形链表.cpp"; sourceTree = "<group>"; };
		65118AFD2508FF79004D8F15 /* 141_环形链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "141_环形链表.hpp"; sourceTree = "<group>"; };
		65282CFA250F5E0C00CEFC94 /* faceTest_0206_回文链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "faceTest_0206_回文链表.cpp"; sourceTree = "<group>"; };
		65282CFB250F5E0C00CEFC94 /* faceTest_0206_回文链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "faceTest_0206_回文链表.hpp"; sourceTree = "<group>"; };
		65282CFD250F6DE000CEFC94 /* 234_回文链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "234_回文链表.cpp"; sourceTree = "<group>"; };
		65282CFE250F6DE000CEFC94 /* 234_回文链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "234_回文链表.hpp"; sourceTree = "<group>"; };
		652FAB73251B400700AB91C6 /* Node.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = Node.hpp; sourceTree = "<group>"; };
		654466B52509111000E5959E /* 83_删除排序链表中的重复元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "83_删除排序链表中的重复元素.cpp"; sourceTree = "<group>"; };
		654466B62509111000E5959E /* 83_删除排序链表中的重复元素.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "83_删除排序链表中的重复元素.hpp"; sourceTree = "<group>"; };
		654466B82509134800E5959E /* 876_链表的中间节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "876_链表的中间节点.cpp"; sourceTree = "<group>"; };
		654466B92509134800E5959E /* 876_链表的中间节点.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "876_链表的中间节点.hpp"; sourceTree = "<group>"; };
		6546F45F2510DF8E0016F09D /* 856_括号的分数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "856_括号的分数.cpp"; sourceTree = "<group>"; };
		6546F4602510DF8E0016F09D /* 856_括号的分数.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "856_括号的分数.hpp"; sourceTree = "<group>"; };
		6546F4622510F0730016F09D /* 150_逆波兰表达式求值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "150_逆波兰表达式求值.cpp"; sourceTree = "<group>"; };
		6546F4632510F0730016F09D /* 150_逆波兰表达式求值.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "150_逆波兰表达式求值.hpp"; sourceTree = "<group>"; };
		6546F4652510F5650016F09D /* 224_基本计算器.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "224_基本计算器.cpp"; sourceTree = "<group>"; };
		6546F4662510F5650016F09D /* 224_基本计算器.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "224_基本计算器.hpp"; sourceTree = "<group>"; };
		6546F46A2511ED570016F09D /* 232_用栈实现队列.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "232_用栈实现队列.cpp"; sourceTree = "<group>"; };
		6546F46B2511ED570016F09D /* 232_用栈实现队列.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "232_用栈实现队列.hpp"; sourceTree = "<group>"; };
		6546F46D2511F2D30016F09D /* 1021_删除最外层的括号.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1021_删除最外层的括号.cpp"; sourceTree = "<group>"; };
		6546F46E2511F2D30016F09D /* 1021_删除最外层的括号.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1021_删除最外层的括号.hpp"; sourceTree = "<group>"; };
		658295DD24ED057E0077E48E /* testC++++ */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = "testC++++"; sourceTree = BUILT_PRODUCTS_DIR; };
		658295E024ED057E0077E48E /* main.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = main.cpp; sourceTree = "<group>"; };
		65870724250B9C5D005BFEC2 /* 1290_二进制链表转整数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1290_二进制链表转整数.cpp"; sourceTree = "<group>"; };
		65870725250B9C5D005BFEC2 /* 1290_二进制链表转整数.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1290_二进制链表转整数.hpp"; sourceTree = "<group>"; };
		65870727250BA06C005BFEC2 /* offer_22_链表中倒数第k个节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "offer_22_链表中倒数第k个节点.cpp"; sourceTree = "<group>"; };
		65870728250BA06C005BFEC2 /* offer_22_链表中倒数第k个节点.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "offer_22_链表中倒数第k个节点.hpp"; sourceTree = "<group>"; };
		6587072A250BA320005BFEC2 /* faceTest_0202_返回倒数第 k 个节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "faceTest_0202_返回倒数第 k 个节点.cpp"; sourceTree = "<group>"; };
		6587072B250BA320005BFEC2 /* faceTest_0202_返回倒数第 k 个节点.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "faceTest_0202_返回倒数第 k 个节点.hpp"; sourceTree = "<group>"; };
		6587072D250BA768005BFEC2 /* offer_06_从尾到头打印链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "offer_06_从尾到头打印链表.cpp"; sourceTree = "<group>"; };
		6587072E250BA768005BFEC2 /* offer_06_从尾到头打印链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "offer_06_从尾到头打印链表.hpp"; sourceTree = "<group>"; };
		65870730250BB3F1005BFEC2 /* offer_24_反转链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "offer_24_反转链表.cpp"; sourceTree = "<group>"; };
		65870731250BB3F1005BFEC2 /* offer_24_反转链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "offer_24_反转链表.hpp"; sourceTree = "<group>"; };
		65870733250BB560005BFEC2 /* faceTest_0201_移除重复节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "faceTest_0201_移除重复节点.cpp"; sourceTree = "<group>"; };
		65870734250BB560005BFEC2 /* faceTest_0201_移除重复节点.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "faceTest_0201_移除重复节点.hpp"; sourceTree = "<group>"; };
		65A1285825135967008E24AF /* 1544_整理字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1544_整理字符串.cpp"; sourceTree = "<group>"; };
		65A1285925135967008E24AF /* 1544_整理字符串.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1544_整理字符串.hpp"; sourceTree = "<group>"; };
		65A1285C251374BE008E24AF /* 225_用队列实现栈.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "225_用队列实现栈.cpp"; sourceTree = "<group>"; };
		65A1285D251374BE008E24AF /* 225_用队列实现栈.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "225_用队列实现栈.hpp"; sourceTree = "<group>"; };
		65A1286225138DAE008E24AF /* 933_最近的请求次数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "933_最近的请求次数.cpp"; sourceTree = "<group>"; };
		65A1286325138DAE008E24AF /* 933_最近的请求次数.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "933_最近的请求次数.hpp"; sourceTree = "<group>"; };
		65A1286725139293008E24AF /* offer_59_滑动窗口的最大值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "offer_59_滑动窗口的最大值.cpp"; sourceTree = "<group>"; };
		65A1286825139293008E24AF /* offer_59_滑动窗口的最大值.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "offer_59_滑动窗口的最大值.hpp"; sourceTree = "<group>"; };
		65A1286B2513A84B008E24AF /* 239_滑动窗口最大值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "239_滑动窗口最大值.cpp"; sourceTree = "<group>"; };
		65A1286C2513A84B008E24AF /* 239_滑动窗口最大值.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "239_滑动窗口最大值.hpp"; sourceTree = "<group>"; };
		65A9D3E8251B234800244EFF /* 107_二叉树的层次遍历 II.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "107_二叉树的层次遍历 II.cpp"; sourceTree = "<group>"; };
		65A9D3E9251B234800244EFF /* 107_二叉树的层次遍历 II.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "107_二叉树的层次遍历 II.hpp"; sourceTree = "<group>"; };
		65A9D3EC251B239000244EFF /* 662_二叉树最大宽度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "662_二叉树最大宽度.cpp"; sourceTree = "<group>"; };
		65A9D3ED251B239000244EFF /* 662_二叉树最大宽度.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "662_二叉树最大宽度.hpp"; sourceTree = "<group>"; };
		65A9D3F0251B23E000244EFF /* 589_N叉树的前序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "589_N叉树的前序遍历.cpp"; sourceTree = "<group>"; };
		65A9D3F1251B23E000244EFF /* 589_N叉树的前序遍历.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "589_N叉树的前序遍历.hpp"; sourceTree = "<group>"; };
		65A9D3F4251B240D00244EFF /* 590_N叉树的后序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "590_N叉树的后序遍历.cpp"; sourceTree = "<group>"; };
		65A9D3F5251B240D00244EFF /* 590_N叉树的后序遍历.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "590_N叉树的后序遍历.hpp"; sourceTree = "<group>"; };
		65A9D3F8251B243700244EFF /* 559_N叉树的最大深度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "559_N叉树的最大深度.cpp"; sourceTree = "<group>"; };
		65A9D3F9251B243700244EFF /* 559_N叉树的最大深度.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "559_N叉树的最大深度.hpp"; sourceTree = "<group>"; };
		65A9D3FC251B246900244EFF /* 114_二叉树展开为链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "114_二叉树展开为链表.cpp"; sourceTree = "<group>"; };
		65A9D3FD251B246900244EFF /* 114_二叉树展开为链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "114_二叉树展开为链表.hpp"; sourceTree = "<group>"; };
		65A9D400251B249900244EFF /* 101_对称二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "101_对称二叉树.cpp"; sourceTree = "<group>"; };
		65A9D401251B249900244EFF /* 101_对称二叉树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "101_对称二叉树.hpp"; sourceTree = "<group>"; };
		65A9D404251B24CF00244EFF /* 889_根据前序和后序遍历构造二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "889_根据前序和后序遍历构造二叉树.cpp"; sourceTree = "<group>"; };
		65A9D405251B24CF00244EFF /* 889_根据前序和后序遍历构造二叉树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "889_根据前序和后序遍历构造二叉树.hpp"; sourceTree = "<group>"; };
		65A9D408251B24FE00244EFF /* 106_从中序与后序遍历序列构造二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "106_从中序与后序遍历序列构造二叉树.cpp"; sourceTree = "<group>"; };
		65A9D409251B24FE00244EFF /* 106_从中序与后序遍历序列构造二叉树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "106_从中序与后序遍历序列构造二叉树.hpp"; sourceTree = "<group>"; };
		65A9D40C251B252600244EFF /* 105_从前序与中序遍历序列构造二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "105_从前序与中序遍历序列构造二叉树.cpp"; sourceTree = "<group>"; };
		65A9D40D251B252600244EFF /* 105_从前序与中序遍历序列构造二叉树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "105_从前序与中序遍历序列构造二叉树.hpp"; sourceTree = "<group>"; };
		65B5374A250903DB00FE9807 /* 203_移除链表元素.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "203_移除链表元素.cpp"; sourceTree = "<group>"; };
		65B5374B250903DB00FE9807 /* 203_移除链表元素.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "203_移除链表元素.hpp"; sourceTree = "<group>"; };
		65B6820D250F583A00C039AB /* 160_相交链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "160_相交链表.cpp"; sourceTree = "<group>"; };
		65B6820E250F583A00C039AB /* 160_相交链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "160_相交链表.hpp"; sourceTree = "<group>"; };
		65C28C682519DA9F00C94E7C /* 226_翻转二叉树.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "226_翻转二叉树.cpp"; sourceTree = "<group>"; };
		65C28C692519DA9F00C94E7C /* 226_翻转二叉树.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "226_翻转二叉树.hpp"; sourceTree = "<group>"; };
		65C28C6D2519DC5A00C94E7C /* TreeNode.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = TreeNode.hpp; sourceTree = "<group>"; };
		65CCFBC4250F75E700ECC563 /* 20_有效的括号.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "20_有效的括号.cpp"; sourceTree = "<group>"; };
		65CCFBC5250F75E700ECC563 /* 20_有效的括号.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "20_有效的括号.hpp"; sourceTree = "<group>"; };
		65D2EAAF250F4214009DC352 /* faceTest_0207_链表相交.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "faceTest_0207_链表相交.cpp"; sourceTree = "<group>"; };
		65D2EAB0250F4214009DC352 /* faceTest_0207_链表相交.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "faceTest_0207_链表相交.hpp"; sourceTree = "<group>"; };
		65D2EAB2250F4AE0009DC352 /* 21_合并两个有序链表.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "21_合并两个有序链表.cpp"; sourceTree = "<group>"; };
		65D2EAB3250F4AE0009DC352 /* 21_合并两个有序链表.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "21_合并两个有序链表.hpp"; sourceTree = "<group>"; };
		65D2EAB5250F52D5009DC352 /* offer_52_两个链表的第一个公共节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "offer_52_两个链表的第一个公共节点.cpp"; sourceTree = "<group>"; };
		65D2EAB6250F52D5009DC352 /* offer_52_两个链表的第一个公共节点.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "offer_52_两个链表的第一个公共节点.hpp"; sourceTree = "<group>"; };
		65D2EAB8250F53E9009DC352 /* offer_18_删除链表的节点.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "offer_18_删除链表的节点.cpp"; sourceTree = "<group>"; };
		65D2EAB9250F53E9009DC352 /* offer_18_删除链表的节点.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "offer_18_删除链表的节点.hpp"; sourceTree = "<group>"; };
		65DF9BD22519F6F70055E0BE /* 144_二叉树的前序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "144_二叉树的前序遍历.cpp"; sourceTree = "<group>"; };
		65DF9BD32519F6F70055E0BE /* 144_二叉树的前序遍历.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "144_二叉树的前序遍历.hpp"; sourceTree = "<group>"; };
		65DF9BD7251A03860055E0BE /* 145_二叉树的后序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "145_二叉树的后序遍历.cpp"; sourceTree = "<group>"; };
		65DF9BD8251A03860055E0BE /* 145_二叉树的后序遍历.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "145_二叉树的后序遍历.hpp"; sourceTree = "<group>"; };
		65DF9BDC251A27610055E0BE /* 94_二叉树的中序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "94_二叉树的中序遍历.cpp"; sourceTree = "<group>"; };
		65DF9BDD251A27610055E0BE /* 94_二叉树的中序遍历.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "94_二叉树的中序遍历.hpp"; sourceTree = "<group>"; };
		65DF9BE1251A30320055E0BE /* 102_二叉树的层序遍历.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "102_二叉树的层序遍历.cpp"; sourceTree = "<group>"; };
		65DF9BE2251A30320055E0BE /* 102_二叉树的层序遍历.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "102_二叉树的层序遍历.hpp"; sourceTree = "<group>"; };
		65DF9BE5251A33320055E0BE /* 104_二叉树的最大深度.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "104_二叉树的最大深度.cpp"; sourceTree = "<group>"; };
		65DF9BE6251A33320055E0BE /* 104_二叉树的最大深度.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "104_二叉树的最大深度.hpp"; sourceTree = "<group>"; };
		65FA4BDA2511F9D000FB8651 /* 1047__删除字符串中的所有相邻重复项.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1047__删除字符串中的所有相邻重复项.cpp"; sourceTree = "<group>"; };
		65FA4BDB2511F9D000FB8651 /* 1047__删除字符串中的所有相邻重复项.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1047__删除字符串中的所有相邻重复项.hpp"; sourceTree = "<group>"; };
		65FA4BDD2511FFB700FB8651 /* 682_棒球比赛.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "682_棒球比赛.cpp"; sourceTree = "<group>"; };
		65FA4BDE2511FFB700FB8651 /* 682_棒球比赛.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "682_棒球比赛.hpp"; sourceTree = "<group>"; };
		65FA4BE02512024E00FB8651 /* 496_下一个更大元素 I.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "496_下一个更大元素 I.cpp"; sourceTree = "<group>"; };
		65FA4BE12512024E00FB8651 /* 496_下一个更大元素 I.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "496_下一个更大元素 I.hpp"; sourceTree = "<group>"; };
		65FA4BE3251205FA00FB8651 /* 1441_用栈操作构建数组.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "1441_用栈操作构建数组.cpp"; sourceTree = "<group>"; };
		65FA4BE4251205FA00FB8651 /* 1441_用栈操作构建数组.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "1441_用栈操作构建数组.hpp"; sourceTree = "<group>"; };
		65FA4BE625120AD000FB8651 /* faceTest_0302_栈的最小值.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "faceTest_0302_栈的最小值.cpp"; sourceTree = "<group>"; };
		65FA4BE725120AD000FB8651 /* faceTest_0302_栈的最小值.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "faceTest_0302_栈的最小值.hpp"; sourceTree = "<group>"; };
		65FA4BE925120D8D00FB8651 /* 844_比较含退格的字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "844_比较含退格的字符串.cpp"; sourceTree = "<group>"; };
		65FA4BEA25120D8D00FB8651 /* 844_比较含退格的字符串.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "844_比较含退格的字符串.hpp"; sourceTree = "<group>"; };
		65FA4BEC25120DC000FB8651 /* fileName_other.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = fileName_other.h; sourceTree = "<group>"; };
		8D0C411925E00D0900845117 /* 66_加一.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "66_加一.cpp"; sourceTree = "<group>"; };
		8D0C411A25E00D0900845117 /* 66_加一.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "66_加一.hpp"; sourceTree = "<group>"; };
		8D0C411D25E0111300845117 /* 78_子集.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "78_子集.cpp"; sourceTree = "<group>"; };
		8D0C411E25E0111300845117 /* 78_子集.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "78_子集.hpp"; sourceTree = "<group>"; };
		8D0C412125E016F500845117 /* 289_生命游戏.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "289_生命游戏.cpp"; sourceTree = "<group>"; };
		8D0C412225E016F500845117 /* 289_生命游戏.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "289_生命游戏.hpp"; sourceTree = "<group>"; };
		8D0C412525E027D600845117 /* 48_旋转图像.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "48_旋转图像.cpp"; sourceTree = "<group>"; };
		8D0C412625E027D600845117 /* 48_旋转图像.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "48_旋转图像.hpp"; sourceTree = "<group>"; };
		8D0C412925E02EAD00845117 /* 238_除自身以外数组的乘积.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "238_除自身以外数组的乘积.cpp"; sourceTree = "<group>"; };
		8D0C412A25E02EAD00845117 /* 238_除自身以外数组的乘积.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "238_除自身以外数组的乘积.hpp"; sourceTree = "<group>"; };
		8D0C412D25E034D400845117 /* 287_寻找重复数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "287_寻找重复数.cpp"; sourceTree = "<group>"; };
		8D0C412E25E034D400845117 /* 287_寻找重复数.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "287_寻找重复数.hpp"; sourceTree = "<group>"; };
		8D2196C425E7E415003C2270 /* 剑指 Offer 13. 机器人的运动范围.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 13. 机器人的运动范围.cpp"; sourceTree = "<group>"; };
		8D2196C525E7E415003C2270 /* 剑指 Offer 13. 机器人的运动范围.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 13. 机器人的运动范围.hpp"; sourceTree = "<group>"; };
		8D2196CA25E80390003C2270 /* 剑指 Offer 14- I. 剪绳子.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 14- I. 剪绳子.cpp"; sourceTree = "<group>"; };
		8D2196CB25E80390003C2270 /* 剑指 Offer 14- I. 剪绳子.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 14- I. 剪绳子.hpp"; sourceTree = "<group>"; };
		8D2196D925E8162E003C2270 /* 剑指 Offer 15. 二进制中1的个数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 15. 二进制中1的个数.cpp"; sourceTree = "<group>"; };
		8D2196DA25E8162E003C2270 /* 剑指 Offer 15. 二进制中1的个数.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 15. 二进制中1的个数.hpp"; sourceTree = "<group>"; };
		8D2196DF25E817F7003C2270 /* 剑指 Offer 16. 数值的整数次方.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 16. 数值的整数次方.cpp"; sourceTree = "<group>"; };
		8D2196E025E817F7003C2270 /* 剑指 Offer 16. 数值的整数次方.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 16. 数值的整数次方.hpp"; sourceTree = "<group>"; };
		8D2196E525E81D80003C2270 /* 剑指 Offer 17. 打印从1到最大的n位数.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 17. 打印从1到最大的n位数.cpp"; sourceTree = "<group>"; };
		8D2196E625E81D80003C2270 /* 剑指 Offer 17. 打印从1到最大的n位数.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 17. 打印从1到最大的n位数.hpp"; sourceTree = "<group>"; };
		8D2196EB25E823DB003C2270 /* 剑指 Offer 48. 最长不含重复字符的子字符串.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = "剑指 Offer 48. 最长不含重复字符的子字符串.cpp"; sourceTree = "<group>"; };
		8D2196EC25E823DB003C2270 /* 剑指 Offer 48. 最长不含重复字符的子字符串.hpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.h; path = "剑指 Offer 48. 最长不含重复字符的子字符串.hpp"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		658295DA24ED057E0077E48E /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		658295D424ED057E0077E48E = {
			isa = PBXGroup;
			children = (
				658295DF24ED057E0077E48E /* testC++++ */,
				658295DE24ED057E0077E48E /* Products */,
			);
			sourceTree = "<group>";
		};
		658295DE24ED057E0077E48E /* Products */ = {
			isa = PBXGroup;
			children = (
				658295DD24ED057E0077E48E /* testC++++ */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		658295DF24ED057E0077E48E /* testC++++ */ = {
			isa = PBXGroup;
			children = (
				658295E024ED057E0077E48E /* main.cpp */,
				65118AF42508EC7A004D8F15 /* common.h */,
				65FA4BEC25120DC000FB8651 /* fileName_other.h */,
				3B349532259793F6007F62A7 /* fileName_tree.h */,
				3B90ACBD25DBCBF2008693D3 /* fileName_array.h */,
				3BED9E7925DD02C400866BE5 /* filename_listNode.h */,
				3BED9E8425DD052B00866BE5 /* filename_dp.h */,
				3B5A406D25E795710079329D /* filename_offer.h */,
				65118AFA2508F836004D8F15 /* ListNode.hpp */,
				65C28C6D2519DC5A00C94E7C /* TreeNode.hpp */,
				652FAB73251B400700AB91C6 /* Node.hpp */,
				3BD267D2258A11D000B698E0 /* yufa.h */,
				3B5A406725E794DC0079329D /* --------------重刷--------------.h */,
				3B5A407725E7A2450079329D /* 剑指 Offer 04. 二维数组中的查找.cpp */,
				3B5A407825E7A2450079329D /* 剑指 Offer 04. 二维数组中的查找.hpp */,
				3B5A407D25E7A5790079329D /* 剑指 Offer 05. 替换空格.cpp */,
				3B5A407E25E7A5790079329D /* 剑指 Offer 05. 替换空格.hpp */,
				3B5A408325E7AC0D0079329D /* 剑指 Offer 06. 从尾到头打印链表.cpp */,
				3B5A408425E7AC0D0079329D /* 剑指 Offer 06. 从尾到头打印链表.hpp */,
				3B5A408925E7AF510079329D /* 剑指 Offer 07. 重建二叉树.cpp */,
				3B5A408A25E7AF510079329D /* 剑指 Offer 07. 重建二叉树.hpp */,
				3B5A409325E7C5ED0079329D /* 剑指 Offer 09. 用两个栈实现队列.cpp */,
				3B5A409425E7C5ED0079329D /* 剑指 Offer 09. 用两个栈实现队列.hpp */,
				3B5A409A25E7C8050079329D /* 剑指 Offer 10- I. 斐波那契数列.cpp */,
				3B5A409B25E7C8050079329D /* 剑指 Offer 10- I. 斐波那契数列.hpp */,
				3B5A40A025E7CABF0079329D /* 剑指 Offer 10- II. 青蛙跳台阶问题.cpp */,
				3B5A40A125E7CABF0079329D /* 剑指 Offer 10- II. 青蛙跳台阶问题.hpp */,
				3B5A40A625E7CCA10079329D /* 剑指 Offer 11. 旋转数组的最小数字.cpp */,
				3B5A40A725E7CCA10079329D /* 剑指 Offer 11. 旋转数组的最小数字.hpp */,
				3B5A40AC25E7CF130079329D /* 剑指 Offer 12. 矩阵中的路径.cpp */,
				3B5A40AD25E7CF130079329D /* 剑指 Offer 12. 矩阵中的路径.hpp */,
				8D2196C425E7E415003C2270 /* 剑指 Offer 13. 机器人的运动范围.cpp */,
				8D2196C525E7E415003C2270 /* 剑指 Offer 13. 机器人的运动范围.hpp */,
				8D2196CA25E80390003C2270 /* 剑指 Offer 14- I. 剪绳子.cpp */,
				8D2196CB25E80390003C2270 /* 剑指 Offer 14- I. 剪绳子.hpp */,
				8D2196D925E8162E003C2270 /* 剑指 Offer 15. 二进制中1的个数.cpp */,
				8D2196DA25E8162E003C2270 /* 剑指 Offer 15. 二进制中1的个数.hpp */,
				8D2196DF25E817F7003C2270 /* 剑指 Offer 16. 数值的整数次方.cpp */,
				8D2196E025E817F7003C2270 /* 剑指 Offer 16. 数值的整数次方.hpp */,
				8D2196E525E81D80003C2270 /* 剑指 Offer 17. 打印从1到最大的n位数.cpp */,
				8D2196E625E81D80003C2270 /* 剑指 Offer 17. 打印从1到最大的n位数.hpp */,
				3B5A407125E79DE60079329D /* 剑指 Offer 22. 链表中倒数第k个节点.cpp */,
				3B5A407225E79DE60079329D /* 剑指 Offer 22. 链表中倒数第k个节点.hpp */,
				8D2196EB25E823DB003C2270 /* 剑指 Offer 48. 最长不含重复字符的子字符串.cpp */,
				8D2196EC25E823DB003C2270 /* 剑指 Offer 48. 最长不含重复字符的子字符串.hpp */,
				3B5A406825E7955F0079329D /* 剑指 Offer 58 - II. 左旋转字符串.cpp */,
				3B5A406925E7955F0079329D /* 剑指 Offer 58 - II. 左旋转字符串.hpp */,
				3B5A408F25E7C30E0079329D /* 105.cpp */,
				3B5A409025E7C30E0079329D /* 105.hpp */,
				3BED9E7E25DD035100866BE5 /* --------------数组--------------.h */,
				3BE3DF8225DFF193008FD20B /* 1_两数之和.cpp */,
				3BE3DF8325DFF193008FD20B /* 1_两数之和.hpp */,
				3BE3DF7E25DFEC3D008FD20B /* 26_删除排序数组中的重复项.cpp */,
				3BE3DF7F25DFEC3D008FD20B /* 26_删除排序数组中的重复项.hpp */,
				8D0C412525E027D600845117 /* 48_旋转图像.cpp */,
				8D0C412625E027D600845117 /* 48_旋转图像.hpp */,
				8D0C411925E00D0900845117 /* 66_加一.cpp */,
				8D0C411A25E00D0900845117 /* 66_加一.hpp */,
				3B90ACC025DBE126008693D3 /* 75_颜色分类.cpp */,
				3B90ACC125DBE126008693D3 /* 75_颜色分类.hpp */,
				8D0C411D25E0111300845117 /* 78_子集.cpp */,
				8D0C411E25E0111300845117 /* 78_子集.hpp */,
				3B90ACB925DBCBCA008693D3 /* 88_合并两个有序数组.cpp */,
				3B90ACBA25DBCBCA008693D3 /* 88_合并两个有序数组.hpp */,
				3B90ACC925DBF459008693D3 /* 164_最大间距.cpp */,
				3B90ACCA25DBF459008693D3 /* 164_最大间距.hpp */,
				3BE3DF6625DFCB66008FD20B /* 169_多数元素.cpp */,
				3BE3DF6725DFCB66008FD20B /* 169_多数元素.hpp */,
				3BE3DF7A25DFE878008FD20B /* 217_存在重复元素.cpp */,
				3BE3DF7B25DFE878008FD20B /* 217_存在重复元素.hpp */,
				8D0C412925E02EAD00845117 /* 238_除自身以外数组的乘积.cpp */,
				8D0C412A25E02EAD00845117 /* 238_除自身以外数组的乘积.hpp */,
				3BE3DF7525DFDE4D008FD20B /* 268_丢失的数字.cpp */,
				3BE3DF7625DFDE4D008FD20B /* 268_丢失的数字.hpp */,
				3BE3DF6A25DFD2D7008FD20B /* 283_移动零.cpp */,
				3BE3DF6B25DFD2D7008FD20B /* 283_移动零.hpp */,
				8D0C412D25E034D400845117 /* 287_寻找重复数.cpp */,
				8D0C412E25E034D400845117 /* 287_寻找重复数.hpp */,
				8D0C412125E016F500845117 /* 289_生命游戏.cpp */,
				8D0C412225E016F500845117 /* 289_生命游戏.hpp */,
				3B90ACCD25DCF733008693D3 /* 977_有序数组的平方.cpp */,
				3B90ACCE25DCF733008693D3 /* 977_有序数组的平方.hpp */,
				3B90ACC525DBE980008693D3 /* faceTest_1616_部分排序.cpp */,
				3B90ACC625DBE980008693D3 /* faceTest_1616_部分排序.hpp */,
				3B5A406325E78A400079329D /* _offer_03_数组中重复的数字.cpp */,
				3B5A406425E78A400079329D /* _offer_03_数组中重复的数字.hpp */,
				3BED9E7D25DD034300866BE5 /* --------------链表--------------.h */,
				3BE3DF3C25DD0E92008FD20B /* 2_两数相加.cpp */,
				3BE3DF3D25DD0E92008FD20B /* 2_两数相加.hpp */,
				3BE3DF5125DE7742008FD20B /* 19_删除链表的倒数第 N 个结点.cpp */,
				3BE3DF5225DE7742008FD20B /* 19_删除链表的倒数第 N 个结点.hpp */,
				65D2EAB2250F4AE0009DC352 /* 21_合并两个有序链表.cpp */,
				65D2EAB3250F4AE0009DC352 /* 21_合并两个有序链表.hpp */,
				3BE3DF4D25DE5D30008FD20B /* 23_合并K个升序链表.cpp */,
				3BE3DF4E25DE5D31008FD20B /* 23_合并K个升序链表.hpp */,
				3BE3DF4925DE4141008FD20B /* 25_K 个一组翻转链表.cpp */,
				3BE3DF4A25DE4141008FD20B /* 25_K 个一组翻转链表.hpp */,
				654466B52509111000E5959E /* 83_删除排序链表中的重复元素.cpp */,
				654466B62509111000E5959E /* 83_删除排序链表中的重复元素.hpp */,
				3BE3DF4025DD244D008FD20B /* 86_分隔链表.cpp */,
				3BE3DF4125DD244D008FD20B /* 86_分隔链表.hpp */,
				3BE3DF4425DD4622008FD20B /* 138_复制带随机指针的链表.cpp */,
				3BE3DF4525DD4622008FD20B /* 138_复制带随机指针的链表.hpp */,
				65118AFC2508FF79004D8F15 /* 141_环形链表.cpp */,
				65118AFD2508FF79004D8F15 /* 141_环形链表.hpp */,
				3BE3DF5525DE8832008FD20B /* 148_排序链表.cpp */,
				3BE3DF5625DE8832008FD20B /* 148_排序链表.hpp */,
				65B6820D250F583A00C039AB /* 160_相交链表.cpp */,
				65B6820E250F583A00C039AB /* 160_相交链表.hpp */,
				65B5374A250903DB00FE9807 /* 203_移除链表元素.cpp */,
				65B5374B250903DB00FE9807 /* 203_移除链表元素.hpp */,
				65118AF62508F3E4004D8F15 /* 206_反转链表.cpp */,
				65118AF72508F3E4004D8F15 /* 206_反转链表.hpp */,
				65282CFD250F6DE000CEFC94 /* 234_回文链表.cpp */,
				65282CFE250F6DE000CEFC94 /* 234_回文链表.hpp */,
				65118AED2508EA58004D8F15 /* 237_删除链表中的节点.cpp */,
				65118AEE2508EA58004D8F15 /* 237_删除链表中的节点.hpp */,
				3BE3DF5A25DFB58E008FD20B /* 328_奇偶链表.cpp */,
				3BE3DF5B25DFB58E008FD20B /* 328_奇偶链表.hpp */,
				654466B82509134800E5959E /* 876_链表的中间节点.cpp */,
				654466B92509134800E5959E /* 876_链表的中间节点.hpp */,
				65870724250B9C5D005BFEC2 /* 1290_二进制链表转整数.cpp */,
				65870725250B9C5D005BFEC2 /* 1290_二进制链表转整数.hpp */,
				6587072D250BA768005BFEC2 /* offer_06_从尾到头打印链表.cpp */,
				6587072E250BA768005BFEC2 /* offer_06_从尾到头打印链表.hpp */,
				65D2EAB8250F53E9009DC352 /* offer_18_删除链表的节点.cpp */,
				65D2EAB9250F53E9009DC352 /* offer_18_删除链表的节点.hpp */,
				65870727250BA06C005BFEC2 /* offer_22_链表中倒数第k个节点.cpp */,
				65870728250BA06C005BFEC2 /* offer_22_链表中倒数第k个节点.hpp */,
				65870730250BB3F1005BFEC2 /* offer_24_反转链表.cpp */,
				65870731250BB3F1005BFEC2 /* offer_24_反转链表.hpp */,
				65D2EAB5250F52D5009DC352 /* offer_52_两个链表的第一个公共节点.cpp */,
				65D2EAB6250F52D5009DC352 /* offer_52_两个链表的第一个公共节点.hpp */,
				65870733250BB560005BFEC2 /* faceTest_0201_移除重复节点.cpp */,
				65870734250BB560005BFEC2 /* faceTest_0201_移除重复节点.hpp */,
				6587072A250BA320005BFEC2 /* faceTest_0202_返回倒数第 k 个节点.cpp */,
				6587072B250BA320005BFEC2 /* faceTest_0202_返回倒数第 k 个节点.hpp */,
				65282CFA250F5E0C00CEFC94 /* faceTest_0206_回文链表.cpp */,
				65282CFB250F5E0C00CEFC94 /* faceTest_0206_回文链表.hpp */,
				65D2EAAF250F4214009DC352 /* faceTest_0207_链表相交.cpp */,
				65D2EAB0250F4214009DC352 /* faceTest_0207_链表相交.hpp */,
				3BED9E7F25DD036700866BE5 /* --------------动态规划--------------.h */,
				3B59F34225CBE58300B6317A /* 51_N皇后.cpp */,
				3B59F34325CBE58300B6317A /* 51_N皇后.hpp */,
				3B59F34725CD2D2100B6317A /* 53_最大子序和.cpp */,
				3B59F34825CD2D2100B6317A /* 53_最大子序和.hpp */,
				3BCBE21525D26577000CFD5E /* 70_爬楼梯.cpp */,
				3BCBE21625D26577000CFD5E /* 70_爬楼梯.hpp */,
				3BE3DF5E25DFBC22008FD20B /* 118_杨辉三角.cpp */,
				3BE3DF5F25DFBC22008FD20B /* 118_杨辉三角.hpp */,
				3BCBE22225D27BAA000CFD5E /* 121_买卖股票的最佳时机.cpp */,
				3BCBE22325D27BAA000CFD5E /* 121_买卖股票的最佳时机.hpp */,
				3BE3DF6225DFC0F6008FD20B /* 122_买卖股票的最佳时机 II.cpp */,
				3BE3DF6325DFC0F6008FD20B /* 122_买卖股票的最佳时机 II.hpp */,
				3BCBE22E25D29368000CFD5E /* 198_打家劫舍.cpp */,
				3BCBE22F25D29368000CFD5E /* 198_打家劫舍.hpp */,
				3BDBBAC725D7B62E00610886 /* 300_最长递增子序列.cpp */,
				3BDBBAC825D7B62E00610886 /* 300_最长递增子序列.hpp */,
				3BB1949025CFD07E006344FF /* 322_零钱兑换.cpp */,
				3BB1949125CFD07E006344FF /* 322_零钱兑换.hpp */,
				65118AE62508CFBD004D8F15 /* 509_斐波那契数.cpp */,
				65118AEA2508D41C004D8F15 /* 509_斐波那契数.hpp */,
				3BB1949425CFE7B5006344FF /* 518_零钱兑换II.cpp */,
				3BB1949525CFE7B5006344FF /* 518_零钱兑换II.hpp */,
				3BCBE22625D28371000CFD5E /* 746_使用最小花费爬楼梯.cpp */,
				3BCBE22725D28371000CFD5E /* 746_使用最小花费爬楼梯.hpp */,
				3BCBE21E25D2745D000CFD5E /* 860_柠檬水找零.cpp */,
				3BCBE21F25D2745D000CFD5E /* 860_柠檬水找零.hpp */,
				3BDBBACB25D7CDE500610886 /* 1143_最长公共子序列.cpp */,
				3BDBBACC25D7CDE500610886 /* 1143_最长公共子序列.hpp */,
				3BDBBAD325D91E4300610886 /* 9998_最长公共子串.cpp */,
				3BDBBAD425D91E4300610886 /* 9998_最长公共子串.hpp */,
				3BDBBACF25D9185000610886 /* 9999_01背包.cpp */,
				3BDBBAD025D9185000610886 /* 9999_01背包.hpp */,
				3BCBE22A25D28D6E000CFD5E /* faceTest_1716_按摩师.cpp */,
				3BCBE22B25D28D6E000CFD5E /* faceTest_1716_按摩师.hpp */,
				3BED9E8025DD037100866BE5 /* --------------字符串--------------.h */,
				65118AE82508D175004D8F15 /* 5_最长回文子串.cpp */,
				65118AEB2508D444004D8F15 /* 5_最长回文子串.hpp */,
				65118AF12508EC4B004D8F15 /* 14_最长公共前缀.cpp */,
				65118AF22508EC4B004D8F15 /* 14_最长公共前缀.hpp */,
				65CCFBC4250F75E700ECC563 /* 20_有效的括号.cpp */,
				65CCFBC5250F75E700ECC563 /* 20_有效的括号.hpp */,
				6546F4622510F0730016F09D /* 150_逆波兰表达式求值.cpp */,
				6546F4632510F0730016F09D /* 150_逆波兰表达式求值.hpp */,
				6546F4652510F5650016F09D /* 224_基本计算器.cpp */,
				6546F4662510F5650016F09D /* 224_基本计算器.hpp */,
				65FA4BE02512024E00FB8651 /* 496_下一个更大元素 I.cpp */,
				65FA4BE12512024E00FB8651 /* 496_下一个更大元素 I.hpp */,
				65FA4BDD2511FFB700FB8651 /* 682_棒球比赛.cpp */,
				65FA4BDE2511FFB700FB8651 /* 682_棒球比赛.hpp */,
				65FA4BE925120D8D00FB8651 /* 844_比较含退格的字符串.cpp */,
				65FA4BEA25120D8D00FB8651 /* 844_比较含退格的字符串.hpp */,
				6546F45F2510DF8E0016F09D /* 856_括号的分数.cpp */,
				6546F4602510DF8E0016F09D /* 856_括号的分数.hpp */,
				6546F46D2511F2D30016F09D /* 1021_删除最外层的括号.cpp */,
				6546F46E2511F2D30016F09D /* 1021_删除最外层的括号.hpp */,
				65FA4BDA2511F9D000FB8651 /* 1047__删除字符串中的所有相邻重复项.cpp */,
				65FA4BDB2511F9D000FB8651 /* 1047__删除字符串中的所有相邻重复项.hpp */,
				65A1285825135967008E24AF /* 1544_整理字符串.cpp */,
				65A1285925135967008E24AF /* 1544_整理字符串.hpp */,
				3BED9E8125DD037A00866BE5 /* --------------队列--------------.h */,
				6546F46A2511ED570016F09D /* 232_用栈实现队列.cpp */,
				6546F46B2511ED570016F09D /* 232_用栈实现队列.hpp */,
				65A1286B2513A84B008E24AF /* 239_滑动窗口最大值.cpp */,
				65A1286C2513A84B008E24AF /* 239_滑动窗口最大值.hpp */,
				65A1286225138DAE008E24AF /* 933_最近的请求次数.cpp */,
				65A1286325138DAE008E24AF /* 933_最近的请求次数.hpp */,
				65A1286725139293008E24AF /* offer_59_滑动窗口的最大值.cpp */,
				65A1286825139293008E24AF /* offer_59_滑动窗口的最大值.hpp */,
				3BED9E8225DD038200866BE5 /* --------------栈--------------.h */,
				65A1285C251374BE008E24AF /* 225_用队列实现栈.cpp */,
				65A1285D251374BE008E24AF /* 225_用队列实现栈.hpp */,
				65FA4BE3251205FA00FB8651 /* 1441_用栈操作构建数组.cpp */,
				65FA4BE4251205FA00FB8651 /* 1441_用栈操作构建数组.hpp */,
				65FA4BE625120AD000FB8651 /* faceTest_0302_栈的最小值.cpp */,
				65FA4BE725120AD000FB8651 /* faceTest_0302_栈的最小值.hpp */,
				3BED9E8325DD039F00866BE5 /* --------------二叉树--------------.h */,
				65DF9BDC251A27610055E0BE /* 94_二叉树的中序遍历.cpp */,
				65DF9BDD251A27610055E0BE /* 94_二叉树的中序遍历.hpp */,
				3B846DA625A5B14B0072AAAB /* 95_不同的二叉搜索树 II.cpp */,
				3B846DA725A5B14B0072AAAB /* 95_不同的二叉搜索树 II.hpp */,
				3B846D9625A462C30072AAAB /* 96_不同的二叉搜索树.cpp */,
				3B846D9725A462C30072AAAB /* 96_不同的二叉搜索树.hpp */,
				3B3C8A1325934E7F00DEA8D3 /* 100_相同的树.cpp */,
				3B3C8A1425934E7F00DEA8D3 /* 100_相同的树.hpp */,
				65A9D400251B249900244EFF /* 101_对称二叉树.cpp */,
				65A9D401251B249900244EFF /* 101_对称二叉树.hpp */,
				65DF9BE1251A30320055E0BE /* 102_二叉树的层序遍历.cpp */,
				65DF9BE2251A30320055E0BE /* 102_二叉树的层序遍历.hpp */,
				65DF9BE5251A33320055E0BE /* 104_二叉树的最大深度.cpp */,
				65DF9BE6251A33320055E0BE /* 104_二叉树的最大深度.hpp */,
				65A9D40C251B252600244EFF /* 105_从前序与中序遍历序列构造二叉树.cpp */,
				65A9D40D251B252600244EFF /* 105_从前序与中序遍历序列构造二叉树.hpp */,
				65A9D408251B24FE00244EFF /* 106_从中序与后序遍历序列构造二叉树.cpp */,
				65A9D409251B24FE00244EFF /* 106_从中序与后序遍历序列构造二叉树.hpp */,
				65A9D3E8251B234800244EFF /* 107_二叉树的层次遍历 II.cpp */,
				65A9D3E9251B234800244EFF /* 107_二叉树的层次遍历 II.hpp */,
				3BE30105258E0A1B00044E78 /* 108_将有序数组转换为二叉搜索树.cpp */,
				3BE30106258E0A1B00044E78 /* 108_将有序数组转换为二叉搜索树.hpp */,
				3BC97F9825976497009E9831 /* 110_平衡二叉树.cpp */,
				3BC97F9925976497009E9831 /* 110_平衡二叉树.hpp */,
				3B3C033C2599CC0400EBAA9F /* 111_二叉树的最小深度.cpp */,
				3B3C033D2599CC0400EBAA9F /* 111_二叉树的最小深度.hpp */,
				3B5461D32598873300BEAE0B /* 112_路径总和.cpp */,
				3B5461D42598873300BEAE0B /* 112_路径总和.hpp */,
				65A9D3FC251B246900244EFF /* 114_二叉树展开为链表.cpp */,
				65A9D3FD251B246900244EFF /* 114_二叉树展开为链表.hpp */,
				3B846D9E25A5A2030072AAAB /* 116_填充每个节点的下一个右侧节点指针.cpp */,
				3B846D9F25A5A2030072AAAB /* 116_填充每个节点的下一个右侧节点指针.hpp */,
				65DF9BD22519F6F70055E0BE /* 144_二叉树的前序遍历.cpp */,
				65DF9BD32519F6F70055E0BE /* 144_二叉树的前序遍历.hpp */,
				65DF9BD7251A03860055E0BE /* 145_二叉树的后序遍历.cpp */,
				65DF9BD8251A03860055E0BE /* 145_二叉树的后序遍历.hpp */,
				3BAB0A5A259C57070078AD65 /* 173_二叉搜索树迭代器.cpp */,
				3BAB0A5B259C57070078AD65 /* 173_二叉搜索树迭代器.hpp */,
				3B3C0354259B08D700EBAA9F /* 222_完全二叉树的节点个数.cpp */,
				3B3C0355259B08D700EBAA9F /* 222_完全二叉树的节点个数.hpp */,
				65C28C682519DA9F00C94E7C /* 226_翻转二叉树.cpp */,
				65C28C692519DA9F00C94E7C /* 226_翻转二叉树.hpp */,
				3BFC2A4A25A2EED300F04ED1 /* 230_二叉搜索树中第K小的元素.cpp */,
				3BFC2A4B25A2EED300F04ED1 /* 230_二叉搜索树中第K小的元素.hpp */,
				3B3C8A062591E5F000DEA8D3 /* 235_二叉搜索树的最近公共祖先.cpp */,
				3B3C8A072591E5F000DEA8D3 /* 235_二叉搜索树的最近公共祖先.hpp */,
				3BC7B3712590D997002FD4EF /* 257_二叉树的所有路径.cpp */,
				3BC7B3722590D997002FD4EF /* 257_二叉树的所有路径.hpp */,
				3B44FAC525949C0100B29245 /* 404_左叶子之和.cpp */,
				3B44FAC625949C0100B29245 /* 404_左叶子之和.hpp */,
				3B846DA225A5AC880072AAAB /* 429_N 叉树的层序遍历.cpp */,
				3B846DA325A5AC880072AAAB /* 429_N 叉树的层序遍历.hpp */,
				3B5461D725988F3900BEAE0B /* 501_二叉搜索树中的众数.cpp */,
				3B5461D825988F3900BEAE0B /* 501_二叉搜索树中的众数.hpp */,
				3BFC2A5225A3010200F04ED1 /* 513_找树左下角的值.cpp */,
				3BFC2A5325A3010200F04ED1 /* 513_找树左下角的值.hpp */,
				3B3C8A0F259340FD00DEA8D3 /* 530_二叉搜索树的最小绝对差.cpp */,
				3B3C8A10259340FD00DEA8D3 /* 530_二叉搜索树的最小绝对差.hpp */,
				3BC97F9C25976B32009E9831 /* 543_二叉树的直径.cpp */,
				3BC97F9D25976B32009E9831 /* 543_二叉树的直径.hpp */,
				65A9D3F8251B243700244EFF /* 559_N叉树的最大深度.cpp */,
				65A9D3F9251B243700244EFF /* 559_N叉树的最大深度.hpp */,
				3B44FABD25947D9200B29245 /* 563_二叉树的坡度.cpp */,
				3B44FABE25947D9200B29245 /* 563_二叉树的坡度.hpp */,
				3B5461DB25989F3000BEAE0B /* 572_另一个树的子树.cpp */,
				3B5461DC25989F3000BEAE0B /* 572_另一个树的子树.hpp */,
				65A9D3F0251B23E000244EFF /* 589_N叉树的前序遍历.cpp */,
				65A9D3F1251B23E000244EFF /* 589_N叉树的前序遍历.hpp */,
				65A9D3F4251B240D00244EFF /* 590_N叉树的后序遍历.cpp */,
				65A9D3F5251B240D00244EFF /* 590_N叉树的后序遍历.hpp */,
				3BC97F94259726A7009E9831 /* 606_根据二叉树创建字符串.cpp */,
				3BC97F95259726A7009E9831 /* 606_根据二叉树创建字符串.hpp */,
				3BC55D1D258B8D4A0039D0D1 /* 617_合并二叉树.cpp */,
				3BC55D1E258B8D4A0039D0D1 /* 617_合并二叉树.hpp */,
				3BBC5DE8258E21C7004CC98D /* 637_二叉树的层平均值.cpp */,
				3BBC5DE9258E21C7004CC98D /* 637_二叉树的层平均值.hpp */,
				3B44FAC125948F3800B29245 /* 653_两数之和 IV - 输入 BST.cpp */,
				3B44FAC225948F3800B29245 /* 653_两数之和 IV - 输入 BST.hpp */,
				3B3C03442599D25E00EBAA9F /* 654_最大二叉树.cpp */,
				3B3C03452599D25E00EBAA9F /* 654_最大二叉树.hpp */,
				65A9D3EC251B239000244EFF /* 662_二叉树最大宽度.cpp */,
				65A9D3ED251B239000244EFF /* 662_二叉树最大宽度.hpp */,
				3BC7B36D2590D100002FD4EF /* 669_修剪二叉搜索树.cpp */,
				3BC7B36E2590D100002FD4EF /* 669_修剪二叉搜索树.hpp */,
				3B5461E02599BB1300BEAE0B /* 671_二叉树中第二小的节点.cpp */,
				3B5461E12599BB1300BEAE0B /* 671_二叉树中第二小的节点.hpp */,
				3BE30101258E038C00044E78 /* 700_二叉搜索树中的搜索.cpp */,
				3BE30102258E038C00044E78 /* 700_二叉搜索树中的搜索.hpp */,
				3BFC2A5625A30F9800F04ED1 /* 701_二叉搜索树中的插入操作.cpp */,
				3BFC2A5725A30F9800F04ED1 /* 701_二叉搜索树中的插入操作.hpp */,
				3BC97F902597223A009E9831 /* 783_二叉搜索树节点最小距离.cpp */,
				3BC97F912597223A009E9831 /* 783_二叉搜索树节点最小距离.hpp */,
				3B846D8625A447D20072AAAB /* 814_二叉树剪枝.cpp */,
				3B846D8725A447D20072AAAB /* 814_二叉树剪枝.hpp */,
				3B3C8A0A2591FD1800DEA8D3 /* 872_叶子相似的树.cpp */,
				3B3C8A0B2591FD1800DEA8D3 /* 872_叶子相似的树.hpp */,
				65A9D404251B24CF00244EFF /* 889_根据前序和后序遍历构造二叉树.cpp */,
				65A9D405251B24CF00244EFF /* 889_根据前序和后序遍历构造二叉树.hpp */,
				3B3C03502599DC4600EBAA9F /* 894_所有可能的满二叉树.cpp */,
				3B3C03512599DC4600EBAA9F /* 894_所有可能的满二叉树.hpp */,
				3BBC5DE0258E1638004CC98D /* 897_递增顺序查找树.cpp */,
				3BBC5DE1258E1638004CC98D /* 897_递增顺序查找树.hpp */,
				3BE300FD258DFF9000044E78 /* 938_二叉搜索树的范围和.cpp */,
				3BE300FE258DFF9000044E78 /* 938_二叉搜索树的范围和.hpp */,
				3BC7B3652590BE4B002FD4EF /* 965_单值二叉树.cpp */,
				3BC7B3662590BE4B002FD4EF /* 965_单值二叉树.hpp */,
				3B846D9225A45C170072AAAB /* 979_在二叉树中分配硬币.cpp */,
				3B846D9325A45C170072AAAB /* 979_在二叉树中分配硬币.hpp */,
				3B5461C425987E7900BEAE0B /* 993_二叉树的堂兄弟节点.cpp */,
				3B5461C525987E7900BEAE0B /* 993_二叉树的堂兄弟节点.hpp */,
				3BFC2A4E25A2F6AB00F04ED1 /* 1008_前序遍历构造二叉搜索树.cpp */,
				3BFC2A4F25A2F6AB00F04ED1 /* 1008_前序遍历构造二叉搜索树.hpp */,
				3BC7B3692590C1FC002FD4EF /* 1022_从根到叶的二进制数之和.cpp */,
				3BC7B36A2590C1FC002FD4EF /* 1022_从根到叶的二进制数之和.hpp */,
				3B846D8A25A449E90072AAAB /* 1104_二叉树寻路.cpp */,
				3B846D8B25A449E90072AAAB /* 1104_二叉树寻路.hpp */,
				3B846D9A25A465C70072AAAB /* 1123_最深叶节点的最近公共祖先.cpp */,
				3B846D9B25A465C70072AAAB /* 1123_最深叶节点的最近公共祖先.hpp */,
				3BE61F48259C704500CA2084 /* 1261_在受污染的二叉树中查找元素.cpp */,
				3BE61F49259C704500CA2084 /* 1261_在受污染的二叉树中查找元素.hpp */,
				3B3C034C2599D89C00EBAA9F /* 1302_层数最深叶子节点的和.cpp */,
				3B3C034D2599D89C00EBAA9F /* 1302_层数最深叶子节点的和.hpp */,
				3BE61F40259C5C9500CA2084 /* 1305_两棵二叉搜索树中的所有元素.cpp */,
				3BE61F41259C5C9500CA2084 /* 1305_两棵二叉搜索树中的所有元素.hpp */,
				3B3C03482599D63700EBAA9F /* 1315_祖父节点值为偶数的节点和.cpp */,
				3B3C03492599D63700EBAA9F /* 1315_祖父节点值为偶数的节点和.hpp */,
				3BE61F44259C645800CA2084 /* 1325_删除给定值的叶子节点.cpp */,
				3BE61F45259C645800CA2084 /* 1325_删除给定值的叶子节点.hpp */,
				3B3C03402599D05900EBAA9F /* 1379_找出克隆二叉树中的相同节点.cpp */,
				3B3C03412599D05900EBAA9F /* 1379_找出克隆二叉树中的相同节点.hpp */,
				3B846D8E25A455670072AAAB /* 1448_统计二叉树中好节点的数目.cpp */,
				3B846D8F25A455670072AAAB /* 1448_统计二叉树中好节点的数目.hpp */,
				3BBC5DDB258E1124004CC98D /* Offer_54_二叉搜索树的第k大节点.cpp */,
				3BBC5DDC258E1124004CC98D /* Offer_54_二叉搜索树的第k大节点.hpp */,
				3BBC5DE4258E2183004CC98D /* Offer_68_1_二叉搜索树的最近公共祖先.cpp */,
				3BBC5DE5258E2183004CC98D /* Offer_68_1_二叉搜索树的最近公共祖先.hpp */,
			);
			path = "testC++++";
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		658295DC24ED057E0077E48E /* testC++++ */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 658295E424ED057E0077E48E /* Build configuration list for PBXNativeTarget "testC++++" */;
			buildPhases = (
				658295D924ED057E0077E48E /* Sources */,
				658295DA24ED057E0077E48E /* Frameworks */,
				658295DB24ED057E0077E48E /* CopyFiles */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = "testC++++";
			productName = "testC++++";
			productReference = 658295DD24ED057E0077E48E /* testC++++ */;
			productType = "com.apple.product-type.tool";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		658295D524ED057E0077E48E /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 1200;
				TargetAttributes = {
					658295DC24ED057E0077E48E = {
						CreatedOnToolsVersion = 12.0;
					};
				};
			};
			buildConfigurationList = 658295D824ED057E0077E48E /* Build configuration list for PBXProject "testC++++" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 658295D424ED057E0077E48E;
			productRefGroup = 658295DE24ED057E0077E48E /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				658295DC24ED057E0077E48E /* testC++++ */,
			);
		};
/* End PBXProject section */

/* Begin PBXSourcesBuildPhase section */
		658295D924ED057E0077E48E /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				3B59F34425CBE58300B6317A /* 51_N皇后.cpp in Sources */,
				3BE3DF4625DD4622008FD20B /* 138_复制带随机指针的链表.cpp in Sources */,
				65870729250BA06C005BFEC2 /* offer_22_链表中倒数第k个节点.cpp in Sources */,
				65A1286925139293008E24AF /* offer_59_滑动窗口的最大值.cpp in Sources */,
				3B5A40A225E7CABF0079329D /* 剑指 Offer 10- II. 青蛙跳台阶问题.cpp in Sources */,
				65FA4BEB25120D8D00FB8651 /* 844_比较含退格的字符串.cpp in Sources */,
				65B6820F250F583A00C039AB /* 160_相交链表.cpp in Sources */,
				3B3C8A1525934E7F00DEA8D3 /* 100_相同的树.cpp in Sources */,
				3BDBBAC925D7B62E00610886 /* 300_最长递增子序列.cpp in Sources */,
				3B44FABF25947D9200B29245 /* 563_二叉树的坡度.cpp in Sources */,
				8D0C412725E027D600845117 /* 48_旋转图像.cpp in Sources */,
				3BCBE22025D2745D000CFD5E /* 860_柠檬水找零.cpp in Sources */,
				65118AFB2508F836004D8F15 /* ListNode.hpp in Sources */,
				8D0C412B25E02EAD00845117 /* 238_除自身以外数组的乘积.cpp in Sources */,
				65A9D3EA251B234800244EFF /* 107_二叉树的层次遍历 II.cpp in Sources */,
				3BE3DF5325DE7742008FD20B /* 19_删除链表的倒数第 N 个结点.cpp in Sources */,
				3BE3DF6825DFCB66008FD20B /* 169_多数元素.cpp in Sources */,
				3B5461D52598873300BEAE0B /* 112_路径总和.cpp in Sources */,
				3BDBBAD525D91E4300610886 /* 9998_最长公共子串.cpp in Sources */,
				3B3C03422599D05900EBAA9F /* 1379_找出克隆二叉树中的相同节点.cpp in Sources */,
				65A9D40E251B252600244EFF /* 105_从前序与中序遍历序列构造二叉树.cpp in Sources */,
				3B846D9025A455670072AAAB /* 1448_统计二叉树中好节点的数目.cpp in Sources */,
				65B5374C250903DB00FE9807 /* 203_移除链表元素.cpp in Sources */,
				3BB1949225CFD07E006344FF /* 322_零钱兑换.cpp in Sources */,
				8D0C411B25E00D0900845117 /* 66_加一.cpp in Sources */,
				3B846D9825A462C30072AAAB /* 96_不同的二叉搜索树.cpp in Sources */,
				3BCBE22425D27BAA000CFD5E /* 121_买卖股票的最佳时机.cpp in Sources */,
				3BE3DF8025DFEC3D008FD20B /* 26_删除排序数组中的重复项.cpp in Sources */,
				3BC55D1F258B8D4B0039D0D1 /* 617_合并二叉树.cpp in Sources */,
				3B846D9C25A465C70072AAAB /* 1123_最深叶节点的最近公共祖先.cpp in Sources */,
				3B5A407325E79DE60079329D /* 剑指 Offer 22. 链表中倒数第k个节点.cpp in Sources */,
				3BE30103258E038C00044E78 /* 700_二叉搜索树中的搜索.cpp in Sources */,
				3B5A406525E78A400079329D /* _offer_03_数组中重复的数字.cpp in Sources */,
				3BC7B3672590BE4B002FD4EF /* 965_单值二叉树.cpp in Sources */,
				8D0C412325E016F500845117 /* 289_生命游戏.cpp in Sources */,
				65A1285E251374BE008E24AF /* 225_用队列实现栈.cpp in Sources */,
				6546F4642510F0730016F09D /* 150_逆波兰表达式求值.cpp in Sources */,
				3B3C8A0C2591FD1800DEA8D3 /* 872_叶子相似的树.cpp in Sources */,
				65A1286D2513A84B008E24AF /* 239_滑动窗口最大值.cpp in Sources */,
				65FA4BDC2511F9D000FB8651 /* 1047__删除字符串中的所有相邻重复项.cpp in Sources */,
				3B90ACCF25DCF733008693D3 /* 977_有序数组的平方.cpp in Sources */,
				3B846D9425A45C170072AAAB /* 979_在二叉树中分配硬币.cpp in Sources */,
				65DF9BD9251A03860055E0BE /* 145_二叉树的后序遍历.cpp in Sources */,
				8D0C411F25E0111300845117 /* 78_子集.cpp in Sources */,
				65118AE72508CFBD004D8F15 /* 509_斐波那契数.cpp in Sources */,
				65DF9BE7251A33320055E0BE /* 104_二叉树的最大深度.cpp in Sources */,
				3B44FAC325948F3800B29245 /* 653_两数之和 IV - 输入 BST.cpp in Sources */,
				3BBC5DEA258E21C7004CC98D /* 637_二叉树的层平均值.cpp in Sources */,
				3BFC2A5825A30F9800F04ED1 /* 701_二叉搜索树中的插入操作.cpp in Sources */,
				3BE3DF5725DE8833008FD20B /* 148_排序链表.cpp in Sources */,
				3BE3DF4F25DE5D31008FD20B /* 23_合并K个升序链表.cpp in Sources */,
				3BC7B36F2590D100002FD4EF /* 669_修剪二叉搜索树.cpp in Sources */,
				3BC97F9A25976497009E9831 /* 110_平衡二叉树.cpp in Sources */,
				654466B72509111000E5959E /* 83_删除排序链表中的重复元素.cpp in Sources */,
				65870726250B9C5D005BFEC2 /* 1290_二进制链表转整数.cpp in Sources */,
				3BC97F922597223A009E9831 /* 783_二叉搜索树节点最小距离.cpp in Sources */,
				3B5A40AE25E7CF130079329D /* 剑指 Offer 12. 矩阵中的路径.cpp in Sources */,
				65D2EAB4250F4AE0009DC352 /* 21_合并两个有序链表.cpp in Sources */,
				8D2196E725E81D80003C2270 /* 剑指 Offer 17. 打印从1到最大的n位数.cpp in Sources */,
				3B846D8825A447D20072AAAB /* 814_二叉树剪枝.cpp in Sources */,
				3BE300FF258DFF9000044E78 /* 938_二叉搜索树的范围和.cpp in Sources */,
				3BE3DF7C25DFE878008FD20B /* 217_存在重复元素.cpp in Sources */,
				3BE3DF4225DD244D008FD20B /* 86_分隔链表.cpp in Sources */,
				3B3C034E2599D89C00EBAA9F /* 1302_层数最深叶子节点的和.cpp in Sources */,
				3BDBBAD125D9185000610886 /* 9999_01背包.cpp in Sources */,
				8D2196ED25E823DB003C2270 /* 剑指 Offer 48. 最长不含重复字符的子字符串.cpp in Sources */,
				3BE3DF8425DFF193008FD20B /* 1_两数之和.cpp in Sources */,
				65A1286425138DAE008E24AF /* 933_最近的请求次数.cpp in Sources */,
				65282CFF250F6DE000CEFC94 /* 234_回文链表.cpp in Sources */,
				3B3C8A082591E5F000DEA8D3 /* 235_二叉搜索树的最近公共祖先.cpp in Sources */,
				3B5461D925988F3900BEAE0B /* 501_二叉搜索树中的众数.cpp in Sources */,
				3BE61F46259C645800CA2084 /* 1325_删除给定值的叶子节点.cpp in Sources */,
				3B5A409C25E7C8050079329D /* 剑指 Offer 10- I. 斐波那契数列.cpp in Sources */,
				3B5A409125E7C30E0079329D /* 105.cpp in Sources */,
				65282CFC250F5E0C00CEFC94 /* faceTest_0206_回文链表.cpp in Sources */,
				3B846D8C25A449E90072AAAB /* 1104_二叉树寻路.cpp in Sources */,
				65A9D3F2251B23E000244EFF /* 589_N叉树的前序遍历.cpp in Sources */,
				65A9D3EE251B239000244EFF /* 662_二叉树最大宽度.cpp in Sources */,
				3BE61F4A259C704500CA2084 /* 1261_在受污染的二叉树中查找元素.cpp in Sources */,
				65DF9BD42519F6F70055E0BE /* 144_二叉树的前序遍历.cpp in Sources */,
				3BE3DF7725DFDE4D008FD20B /* 268_丢失的数字.cpp in Sources */,
				3B44FAC725949C0100B29245 /* 404_左叶子之和.cpp in Sources */,
				3BFC2A4C25A2EED300F04ED1 /* 230_二叉搜索树中第K小的元素.cpp in Sources */,
				65D2EAB7250F52D5009DC352 /* offer_52_两个链表的第一个公共节点.cpp in Sources */,
				8D2196DB25E8162E003C2270 /* 剑指 Offer 15. 二进制中1的个数.cpp in Sources */,
				65CCFBC6250F75E700ECC563 /* 20_有效的括号.cpp in Sources */,
				6587072F250BA768005BFEC2 /* offer_06_从尾到头打印链表.cpp in Sources */,
				65A9D3FE251B246900244EFF /* 114_二叉树展开为链表.cpp in Sources */,
				3B5A409525E7C5ED0079329D /* 剑指 Offer 09. 用两个栈实现队列.cpp in Sources */,
				3BBC5DDD258E1124004CC98D /* Offer_54_二叉搜索树的第k大节点.cpp in Sources */,
				3B5A407925E7A2450079329D /* 剑指 Offer 04. 二维数组中的查找.cpp in Sources */,
				65870735250BB560005BFEC2 /* faceTest_0201_移除重复节点.cpp in Sources */,
				3B5A40A825E7CCA10079329D /* 剑指 Offer 11. 旋转数组的最小数字.cpp in Sources */,
				65870732250BB3F1005BFEC2 /* offer_24_反转链表.cpp in Sources */,
				65FA4BE22512024E00FB8651 /* 496_下一个更大元素 I.cpp in Sources */,
				3BE3DF5C25DFB58E008FD20B /* 328_奇偶链表.cpp in Sources */,
				3BE3DF6C25DFD2D7008FD20B /* 283_移动零.cpp in Sources */,
				3B5A408B25E7AF510079329D /* 剑指 Offer 07. 重建二叉树.cpp in Sources */,
				3BCBE22C25D28D6E000CFD5E /* faceTest_1716_按摩师.cpp in Sources */,
				3BE61F42259C5C9500CA2084 /* 1305_两棵二叉搜索树中的所有元素.cpp in Sources */,
				65118AF32508EC4B004D8F15 /* 14_最长公共前缀.cpp in Sources */,
				3BE3DF4B25DE4141008FD20B /* 25_K 个一组翻转链表.cpp in Sources */,
				65A9D406251B24CF00244EFF /* 889_根据前序和后序遍历构造二叉树.cpp in Sources */,
				658295E124ED057E0077E48E /* main.cpp in Sources */,
				6546F46F2511F2D30016F09D /* 1021_删除最外层的括号.cpp in Sources */,
				3B3C033E2599CC0400EBAA9F /* 111_二叉树的最小深度.cpp in Sources */,
				3B5461E22599BB1300BEAE0B /* 671_二叉树中第二小的节点.cpp in Sources */,
				3BC7B36B2590C1FC002FD4EF /* 1022_从根到叶的二进制数之和.cpp in Sources */,
				3B5A408525E7AC0D0079329D /* 剑指 Offer 06. 从尾到头打印链表.cpp in Sources */,
				8D2196C625E7E415003C2270 /* 剑指 Offer 13. 机器人的运动范围.cpp in Sources */,
				3BC97F96259726A7009E9831 /* 606_根据二叉树创建字符串.cpp in Sources */,
				6546F4612510DF8E0016F09D /* 856_括号的分数.cpp in Sources */,
				3B846DA825A5B14B0072AAAB /* 95_不同的二叉搜索树 II.cpp in Sources */,
				65A9D3F6251B240D00244EFF /* 590_N叉树的后序遍历.cpp in Sources */,
				3B846DA425A5AC880072AAAB /* 429_N 叉树的层序遍历.cpp in Sources */,
				6546F4672510F5650016F09D /* 224_基本计算器.cpp in Sources */,
				3BE30107258E0A1B00044E78 /* 108_将有序数组转换为二叉搜索树.cpp in Sources */,
				3B3C8A11259340FD00DEA8D3 /* 530_二叉搜索树的最小绝对差.cpp in Sources */,
				65A9D3FA251B243700244EFF /* 559_N叉树的最大深度.cpp in Sources */,
				3B90ACC225DBE126008693D3 /* 75_颜色分类.cpp in Sources */,
				65FA4BDF2511FFB700FB8651 /* 682_棒球比赛.cpp in Sources */,
				65D2EABA250F53E9009DC352 /* offer_18_删除链表的节点.cpp in Sources */,
				654466BA2509134800E5959E /* 876_链表的中间节点.cpp in Sources */,
				65DF9BE3251A30320055E0BE /* 102_二叉树的层序遍历.cpp in Sources */,
				3B90ACBB25DBCBCA008693D3 /* 88_合并两个有序数组.cpp in Sources */,
				3BAB0A5C259C57070078AD65 /* 173_二叉搜索树迭代器.cpp in Sources */,
				65A9D402251B249A00244EFF /* 101_对称二叉树.cpp in Sources */,
				3BCBE21725D26577000CFD5E /* 70_爬楼梯.cpp in Sources */,
				6587072C250BA320005BFEC2 /* faceTest_0202_返回倒数第 k 个节点.cpp in Sources */,
				65DF9BDE251A27610055E0BE /* 94_二叉树的中序遍历.cpp in Sources */,
				3BE3DF6425DFC0F6008FD20B /* 122_买卖股票的最佳时机 II.cpp in Sources */,
				3BBC5DE2258E1638004CC98D /* 897_递增顺序查找树.cpp in Sources */,
				3B90ACC725DBE980008693D3 /* faceTest_1616_部分排序.cpp in Sources */,
				65A9D40A251B24FE00244EFF /* 106_从中序与后序遍历序列构造二叉树.cpp in Sources */,
				65118AFE2508FF79004D8F15 /* 141_环形链表.cpp in Sources */,
				65C28C6A2519DA9F00C94E7C /* 226_翻转二叉树.cpp in Sources */,
				3BCBE22825D28371000CFD5E /* 746_使用最小花费爬楼梯.cpp in Sources */,
				3B5461C625987E7900BEAE0B /* 993_二叉树的堂兄弟节点.cpp in Sources */,
				3BC97F9E25976B32009E9831 /* 543_二叉树的直径.cpp in Sources */,
				3BE3DF3E25DD0E92008FD20B /* 2_两数相加.cpp in Sources */,
				3B3C034A2599D63700EBAA9F /* 1315_祖父节点值为偶数的节点和.cpp in Sources */,
				3B5461DD25989F3000BEAE0B /* 572_另一个树的子树.cpp in Sources */,
				65118AEF2508EA58004D8F15 /* 237_删除链表中的节点.cpp in Sources */,
				65118AE92508D175004D8F15 /* 5_最长回文子串.cpp in Sources */,
				3BCBE23025D29368000CFD5E /* 198_打家劫舍.cpp in Sources */,
				3B3C0356259B08D700EBAA9F /* 222_完全二叉树的节点个数.cpp in Sources */,
				3B90ACCB25DBF459008693D3 /* 164_最大间距.cpp in Sources */,
				3B3C03522599DC4600EBAA9F /* 894_所有可能的满二叉树.cpp in Sources */,
				3BC7B3732590D997002FD4EF /* 257_二叉树的所有路径.cpp in Sources */,
				3B846DA025A5A2030072AAAB /* 116_填充每个节点的下一个右侧节点指针.cpp in Sources */,
				3B5A407F25E7A5790079329D /* 剑指 Offer 05. 替换空格.cpp in Sources */,
				3BFC2A5425A3010200F04ED1 /* 513_找树左下角的值.cpp in Sources */,
				3B59F34925CD2D2100B6317A /* 53_最大子序和.cpp in Sources */,
				8D0C412F25E034D400845117 /* 287_寻找重复数.cpp in Sources */,
				65118AF82508F3E4004D8F15 /* 206_反转链表.cpp in Sources */,
				3BBC5DE6258E2183004CC98D /* Offer_68_1_二叉搜索树的最近公共祖先.cpp in Sources */,
				3BDBBACD25D7CDE500610886 /* 1143_最长公共子序列.cpp in Sources */,
				65FA4BE5251205FA00FB8651 /* 1441_用栈操作构建数组.cpp in Sources */,
				3B3C03462599D25E00EBAA9F /* 654_最大二叉树.cpp in Sources */,
				65FA4BE825120AD000FB8651 /* faceTest_0302_栈的最小值.cpp in Sources */,
				3BE3DF6025DFBC22008FD20B /* 118_杨辉三角.cpp in Sources */,
				65D2EAB1250F4214009DC352 /* faceTest_0207_链表相交.cpp in Sources */,
				3BB1949625CFE7B5006344FF /* 518_零钱兑换II.cpp in Sources */,
				6546F46C2511ED570016F09D /* 232_用栈实现队列.cpp in Sources */,
				3BFC2A5025A2F6AB00F04ED1 /* 1008_前序遍历构造二叉搜索树.cpp in Sources */,
				8D2196E125E817F7003C2270 /* 剑指 Offer 16. 数值的整数次方.cpp in Sources */,
				3B5A406A25E7955F0079329D /* 剑指 Offer 58 - II. 左旋转字符串.cpp in Sources */,
				8D2196CC25E80390003C2270 /* 剑指 Offer 14- I. 剪绳子.cpp in Sources */,
				65A1285A25135967008E24AF /* 1544_整理字符串.cpp in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		658295E224ED057E0077E48E /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.15;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				MTL_FAST_MATH = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = macosx;
			};
			name = Debug;
		};
		658295E324ED057E0077E48E /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_ENABLE_OBJC_WEAK = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_DOCUMENTATION_COMMENTS = YES;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNGUARDED_AVAILABILITY = YES_AGGRESSIVE;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				MACOSX_DEPLOYMENT_TARGET = 10.15;
				MTL_ENABLE_DEBUG_INFO = NO;
				MTL_FAST_MATH = YES;
				SDKROOT = macosx;
			};
			name = Release;
		};
		658295E524ED057E0077E48E /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = 839GAQ3VG3;
				ENABLE_HARDENED_RUNTIME = YES;
				HEADER_SEARCH_PATHS = "$(SRCROOT)";
				MACOSX_DEPLOYMENT_TARGET = 10.15;
				PRODUCT_NAME = "$(TARGET_NAME)";
				USER_HEADER_SEARCH_PATHS = "$(SRCROOT)";
			};
			name = Debug;
		};
		658295E624ED057E0077E48E /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				CODE_SIGN_STYLE = Automatic;
				DEVELOPMENT_TEAM = 839GAQ3VG3;
				ENABLE_HARDENED_RUNTIME = YES;
				HEADER_SEARCH_PATHS = "$(SRCROOT)";
				MACOSX_DEPLOYMENT_TARGET = 10.15;
				PRODUCT_NAME = "$(TARGET_NAME)";
				USER_HEADER_SEARCH_PATHS = "$(SRCROOT)";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		658295D824ED057E0077E48E /* Build configuration list for PBXProject "testC++++" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				658295E224ED057E0077E48E /* Debug */,
				658295E324ED057E0077E48E /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		658295E424ED057E0077E48E /* Build configuration list for PBXNativeTarget "testC++++" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				658295E524ED057E0077E48E /* Debug */,
				658295E624ED057E0077E48E /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 658295D524ED057E0077E48E /* Project object */;
}
